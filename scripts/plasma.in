#!/usr/bin/env perl 
# -- -*-perl-*-a

=head1 NAME

B<plasma>:  PLASMA (Parallel LAnguage for System Modelling and Analysis) compiler.

=head1 SYNOPSIS

Usage:  B<plasma> <compiler options>

If a source file is found (.pa extension or I<--plasma> or I<--p> option used),
B<plasma> will compile the file and link it (unless I<-c> option is present).
If no source file exists, only linking will be performed on the files present
(.o files, .a files, etc.).  Note that any unrecognized options are passed
directly to B<g++>, since it has so many different options.

=head1 OPTIONS

=over 8

=item B<--help, --h>

Display this help message.

=item B<--version, -V>

Display the program's version number.

=item B<--man>

Display more documentation using the I<man> format.

=item B<-v>

Verbose mode: Display commands issued by the wrapper script and by the compiler
front-end.

=item B<-E>

Stop after conversion to C++.  The resulting file is <source file>.ii.

=item B<-c>

Compile but do not link.  Linking is suppressed and only an object file is
produced.

=back

=head1 DESCRIPTION

The plasma compiler compiles a PLASMA program by first converting it to C++, then
calling B<g++> to perform the compilation to an object file.

For multi-file development, use the I<-c> option to compile each plasma file to
an object file.  Then use B<plasma>, B<ld> or B<g++> to link them together.
When linking with a program other than B<plasma>, use the B<plasma-config>
script in order to obtain the proper link line.  For instance:

  plasma -c -o a.o a.pa
  plasma -c -o b.o b.pa
  g++ -o prog a.o b.o `plasma-config --libs`

Within a makefile, use the $(shell <cmd>) function to execute this script.  Type

  plasma-config

for more options.

=head1 NOTES

B<Plasma> calls B<g++> without a full path.  Therefore, the version of the
compiler actually invokes depends upon your current environment.  Therefore,
make sure that your PATH (or your wrapper policy, if operating in the SUE
environment with the B<wrapper>) points to a sufficiently modern version of
B<g++>.  A I<3.x> version is recommended.

=cut

# Autoconf substitutions.
my $prefix="@prefix@";
my $cxx="@CXXPROG@";
my $version="@VERSION@";

use Getopt::Long qw(:config no_ignore_case pass_through);
use Pod::Usage;
use strict;

if (!@ARGV) {
  printhelp(1,1);
}

# The trick here is that we have to differentiate between CPP options, OCC
# options, and GCC options.  OCC options are passed directly to plasma before
# the "--".  GCC options are passed directly to plasma after the "--".  CPP
# options must be prefixed with "-d" and must occur before the "--".  The list
# of CPP options was taken from GCC's info page.  Anything not recognized is
# considered to be a GCC option, since there are so many of them.

my $debug = 0; # Uncomment to add more verbosity.
my $man = 0;
my $help = 0;
my $link = 1;
my $compile = 0;
my $verbose = 0;
my $printversion = 0;
my $devel;

# OCC options (pre-compile)
my $occoptions = "";
# CPP options- not directly recognized by 
my $cppoptions = "";
# Compiler options.
my $gccoptions = "";

if (!&GetOptions
    (
     "devel=s"       => \$devel,
     "help|h|?"      => \$help,
     "man"           => \$man,
     "version|V"     => \$printversion,
     "plasma|p=s"    => \&handle_srcfile,
     "I=s"           => \&handle_occ_val,
     "D=s%"          => \&handle_occ_val,
     "v"             => \&handle_occ_noval,
     "C"             => \&handle_occ_noval,
     "E"             => \&handle_occ_noval,
     "c"             => \&handle_occ_noval,
     "include=s"     => \&handle_cpp_val,
     "imacros=s"     => \&handle_cpp_val,
     "idirafter=s"   => \&handle_cpp_val,
     "iprefix=s"     => \&handle_cpp_val,
     "iwithprefix=s" => \&handle_cpp_val,
     "iwithprefixbefore=s" => \&handle_cpp_val,
     "isystem=s"     => \&handle_cpp_val,
     "nostdinc"      => \&handle_cpp_noval,
     "undef"         => \&handle_cpp_noval,
     "P"             => \&handle_cpp_noval,
     "M"             => \&handle_cpp_noval,
     "MM"            => \&handle_cpp_noval,
     "MF=s"          => \&handle_cpp_val,
     "MG"            => \&handle_cpp_noval,
     "MP"            => \&handle_cpp_noval,
     "MT=s"          => \&handle_cpp_val,
     "MQ=s"          => \&handle_cpp_val,
     "MD"            => \&handle_cpp_noval,
     "MMD"           => \&handle_cpp_noval,
     "H"             => \&handle_cpp_noval,
     "dM"            => \&handle_cpp_noval,
     "dD"            => \&handle_cpp_noval,
     "dN"            => \&handle_cpp_noval,
     "trigraphs"     => \&handle_cpp_noval,
     "<>"            => \&handle_gccopts,
    )) {
  printhelp(1,1);
}

# Print help if requested to do so.
printhelp(0,1) if $help;

printhelp(0,2) if $man;

printhelp(0,0,1) if $printversion;

my ($base,$pincs,$plibs,$prog);
my $baselibs = "-lplasma -lgc -lqt -ldl";
if (!$devel) {
  # Normal install mode:  Run using installed stuff.
  $base  = $prefix;
  $pincs = "-d-include$base/include/plasma/plasma-interface.h -I$base/include";
  $plibs = "-L$base/lib -Wl,-R$base/lib $baselibs";
  $prog  = "$base/bin/plasma-comp";
} else {
  # Development mode:  Run using development layout.
  $base  = $devel;
  $pincs = "-d-include$base/src/plasma-interface.h -I$base/src -I$base/gc/include";
  $plibs = "-L$base/src/.libs -Wl,-R$base/src/.libs " .
           "-L$base/qt/.libs -Wl,-R$base/qt/.libs " .
           "-L$base/gc/.libs -Wl,-R$base/gc/.libs $baselibs";
  $prog  = "$base/parser/plasma-comp";
}

sub dprint {
  if ($debug) {
    print @_;
  }
}

# Adds a source file to OCC options and makes sure that
# we only have a single source file.
sub add_srcfile {
  if ($compile) {
    print "Error:  Only one source file is allowed for compiling.\n";
    die;
  }
  $compile = 1;
  $occoptions .= " $_[0]";
}

# Source file found:  Turn on compile option.
sub handle_srcfile {
  $compile = 1;
  add_srcfile($_[0]);
}

# OCC options- no space allowed between option and value.
sub handle_occ_val {
  dprint "Got occ arg $_[0]$_[1]\n";
  $occoptions .= " -$_[0]$_[1]";
}

sub handle_occ_noval {
  my $a = $_[0];
  dprint "Got occ arg $a\n";
  $occoptions .= " -$a";
  $link = 0 if ($a eq "c");
  $verbose = 1 if ($a eq "v");
}

# CPP options- add "-d" so that OCC will pass it to CPP.
sub handle_cpp_val {
  dprint "Got cpp arg $_[0]$_[1]\n";
  $cppoptions .= " -d\"-$_[0]$_[1]\"";
}

sub handle_cpp_noval {
  dprint "Got cpp arg $_[0]\n";
  $cppoptions .= " -d\"-$_[0]\"";
}

# We have to handle -D and -U here b/c of their
# special format.
sub handle_gccopts {
  my $a = shift;
  dprint "Got gcc arg of $a, ";
  if ($a =~ /\.pa$/) {
    # Handle bare source file.
    add_srcfile($a);
  } elsif ($a =~ /^-[UDI]/) {
    # Handle macro define/undefine option.
    dprint " adding to occ\n";
    $occoptions .= " $a";
  } else {
    # Didn't match- assume gcc options.
    dprint " adding to gcc\n";
    $gccoptions .= " $a";
  }
}

sub printhelp() {
  my ($eval,$verbose,$nohelp) = (shift,shift,shift);
  print "\nPLASMA compiler v$version\n\n";
  print "Copyright (c) 2004 Freescale Semiconductor Inc.  All Rights Reserved.\n\n";
  pod2usage(-exitval => $eval,-verbose=>$verbose) if (!$nohelp);
  exit 0;
}

print "[occ options:  $occoptions]\n" if $verbose;
print "[cpp options:  $cppoptions]\n" if $verbose;
print "[gcc options:  $gccoptions]\n" if $verbose;

my $cmd;
if ($compile) {
  # Compile w/optional link.
  $cmd = "$prog --comp=$cxx -u.pa $pincs $occoptions $cppoptions -- $gccoptions";
  if ($link) {
    $cmd .= " $plibs";
  }
} else {
  # Link only.
  if (!$link) {
    print "Error:  Neither compile nor link operation will be performed.\n";
    die;
  }
  $cmd = "$cxx $occoptions $cppoptions $gccoptions $plibs";
}

print "[cmd:  $cmd]\n" if $verbose;

exec $cmd;
