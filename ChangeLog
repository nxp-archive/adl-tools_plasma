2004-05-17  Brian Kahne  <bkahne@ibmoto.com>

	* Added support to spawn for handling member calls.

	* Initial implementation of spawn operator.  It currently only
	processes function calls.

	* Created Result template for storing data from a spawn operation.

2004-05-14  Brian Kahne  <bkahne@ibmoto.com>

	* Added pDone(const THandle), which returns true if the specified
	thread is finished.  

	* Added initial code to parser to parse spawn command.

	* Added C++-only spawn test to test spawn implementation concept.

2004-05-12  Brian Kahne  <bkahne@ibmoto.com>

	* Broke plasma.mc into multiple files.

	* Finished alt work- added exception cleanup code.

	* Modified looping alt so that if the loop index variable
	is not a simple built-in type (integer compatible), we'll create
	an auxiliary vector and store index values there.  The handle we
	store in each channel is the index of the corresponding entry in
	the vector.

2004-05-11  Brian Kahne  <bkahne@ibmoto.com>

	* Changed alt/port block to a new synax.  Now, it's:

	alt {
	  port([<value decl>];<channel>;) { <action> }
	  ...
	  [ { <default action> } ]
	}

	In other words, it's a for-loop style syntax for the port block
	and a full declaration is required; the type-inferencing wasn't
	working very well, so I just made it explicit.

	* Added plasma.h for Plasma interface stuff that we want users to
	have to explicitly include, e.g. channel classes, etc.

	* Moved all plasma interface stuff into the plasma namespace.

2004-05-10  Brian Kahne  <bkahne@ibmoto.com>

	* Initial version of alt added.  The syntax is:

	alt {
	  port(<channel>[,<variable]) { <action> }
	  ...
	  [ { <default action> } ]
	}

	We check each channel listed in a port directive.  If one is found
	ready, its action is executed.  If a variable is present in the
	port statement, the value read from the channel is mapped to the
	variable, which is in scope for the action code.  If the default
	action block is present, then if no channels are ready, it is
	executed.  Otherwise, if no channels are ready, the alt-block
	sleeps until a channel is ready.  The action associated with the
	ready channel is then executed.

2004-05-07  Brian Kahne  <bkahne@ibmoto.com>

	* Expanded plasma-interface.h with functions needed to channels.
	Added chan1 regression to test a primitive channel written
	directly in C++.

2004-05-06  Brian Kahne  <bkahne@ibmoto.com>

	* Started a user guide (doc/user-guide.rst) and a schedule
	(doc/schedule.rst).  The idea is that the schedule will be updated
	in advance and the user guide will be updated before a feature is
	committed.

2004-04-29  Brian Kahne  <bkahne@ibmoto.com>

	* Modified the implementation of pfor:  Instead of allocating
	space for the argument structure on the heap, I added a new
	version of pSpawn which allocates space on the stack structure,
	then copies data to this space.

	* Added support for the "pfor" construct.  Originally, this was to
	be called "par" too, but OpenC++ does not allow the same keyword
	to be used for multiple constructs.

	The usage is:

		pfor (<for-style condition>) {
		  <body>
		}

	<body> is launched as a thread for each iteration of the loop.
	Execution waits at the end of the loop until all threads
	complete.  A pfor loop currently requires that there be at least
	one declaration in the condition of the loop, e.g.

		pfor (int i = 0; i != 10; ++i) { ... }

	The reason for this is that anything declared in the loop
	condition is passed by value to the thread, while everything else
	is passed by reference in order to allow for side effects.
	Without the pass-by-value, the loop would complete (most likely)
	before any thread got scheduled, so every thread would see the
	same final value for the loop variable, rather than the value with
	which the thread was launched.  This seemed the best way to get
	around that undesirable behavior.

2004-04-27  Brian Kahne  <bkahne@ibmoto.com>

	* Added a parallel quicksort to the regression.

	* Fixed parser bug:  You can't make a pointer to a reference, so
	if we use a reference within a par block, we don't take a pointer
	to it- we just keep treating it as a reference.

	* Fixed problem with pAbort() and pExit():  They now immediately
	switch to the scheduler, which sees that a shutdown is requested
	and thus exits.

	* Plasma project should now build and pass its regression.

2004-04-23  Brian Kahne  <bkahne@ibmoto.com>

	*  Start of the plasma project.
