//
// Copyright (C) 2005 by Freescale Semiconductor Inc.  All rights reserved.
//
// You may distribute under the terms of the Artistic License, as specified in
// the COPYING file.
//
//
// This class takes ASTs and performs all of the compilation passes.
//

#include <iostream>
#include <stdexcept>

#include "Compiler.h"
#include "SymTab.h"
#include "Node.h"
#include "CodeGen.h"

using namespace std;
using namespace plasma;

Compiler::Compiler( )
{
}

string get_outname(const char *filename)
{
  string outname = filename;
  size_t pos = outname.rfind(".c");
  if (pos != string::npos) {
    outname = outname.substr(0,pos) + ".s";
  } else {
    outname = outname + ".s";
  }
  pos = outname.rfind("/");
  if (pos != string::npos) {
    outname = outname.substr(pos+1);
  }
  return outname;
}

// Compile a translation unit.
bool Compiler::compileUnit(Node *tu,const char *filename,bool sym_only,bool check_only)
{
  // First, we generate the symbol table.  This has to be done serially b/c of
  // the sequential nature of C, i.e. symbols are visible in the order in which
  // they appear in the file.
  try {
    tu->gensymtab();
  }
  catch (exception &err) {
    cerr << err.what() << endl;
    return false;
  }
  if (sym_only) {
    return true;
  }

  // Main global generator- creates shared data.
  CodeGen maingen(true);

  // Do checking stages.
  if (!tu->dochecks(maingen)) {
    return false;
  }

  // Exit if that's all we're supposed to do.
  if (check_only) {
    return true;
  }

  try {
    // Next, generate global variables.
    // This is done serially.
    maingen.handleGlobals(tu);

    // Generate main code.  This is done in parallel.
    tu->codegen(maingen);
    
    // Create output name from input name.
    string outname = get_outname(filename);

    cout << "\n" << filename << " -> " << outname << "\n";
    
    // Write out all assembly data.
    maingen.write(outname,tu);
  }
  catch (exception &err) {
    cerr << err.what() << endl;
    return false;
  }
  return true;
}
