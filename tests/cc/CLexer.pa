//
// Copyright (C) 2005 by Freescale Semiconductor Inc.  All rights reserved.
//
// You may distribute under the terms of the Artistic License, as specified in
// the COPYING file.
//
//
// Support routines for the tokenizer.
//

#include <sys/stat.h>
#include <sys/mman.h>
#include <fcntl.h>
#include <sstream>
#include <stdexcept>
#include <string.h>

#include "Channels.h"
#include "CLexer.h"
#include "Tokens.h"
#include "cparse.h"

using namespace plasma;
using namespace std;

#define Error(x) { ostringstream ss; ss << x; throw runtime_error(ss.str()); }

CLexer::CLexer(TokChan &c) :
  _linenumber(0),
  _chan(c),
  _fd(-1),
  _base(0),
  _prevpos(0),
  _srcbase(0),
  _bufbase(0),
  _size(0)
{
}

CLexer::CLexer(TokChan &c,const char *filename) :
  yyFlexLexer(),
  _chan(c),
  _fd(-1)
{
  reset(filename);
}

CLexer::~CLexer()
{
  closefile();
}

// We never unmap b/c then any string pointing 
// at the file's data would become invalid.  We just
// close the file in order to reclaim file buffers.
void CLexer::closefile()
{
  if (_fd >= 0) {
    //munmap((void*)_base,_size);
    close(_fd);
  }
}

void CLexer::reset(const char *filename)
{
  struct stat statbuf;

  _filename = filename;
  _linenumber = 1;

  closefile();

  if ( (_fd = open(_filename,O_RDONLY)) < 0) {
    Error("Can't open " << filename << " for reading.");
  }
  if (fstat(_fd,&statbuf) < 0) {
    Error("Can't open " << filename << " for reading.");
  }
  _size = statbuf.st_size;
  if ( (_base = (const char *)mmap(0,_size,PROT_READ,MAP_SHARED,_fd,0)) == (caddr_t)-1) {
    Error("mmap error for input.");
  }

  _prevpos = _base;
  _srcbase = _base;

}

// This defines a new input routine which copies from an mmap'd
// file to a buffer.  The copy is necessary b/c flex modifies its buffer.
int CLexer::LexerInput(char* buf, int max_size )
{
  int result;
  if (_prevpos >= (_base+_size)) { 
    result = 0;
  } else { 
    result = ( (_prevpos + max_size) < (_base + _size)) ?  
      max_size : 
      (_base - _prevpos + _size); 
    memcpy(buf,_prevpos,result); 
    _srcbase = _prevpos;
    _prevpos +=  result;
    _bufbase = buf; 
  }
  return result;
}

// This retrieves text from the mmap'd file.  Use this instead of
// YYText() for anything that will persist, such as strings.
const char *CLexer::yystr()
{
  return _srcbase+(YYText()-_bufbase);
}

void CLexer::tksetup(Tokens &tk,int t)
{
  memset(&tk,0,sizeof(Tokens));
  tk._tok = t;
  tk._ln = _linenumber;
  tk._fn = _filename;
}

// Sends just a token.
void CLexer::send(int t)
{
  Tokens tk;
  tksetup(tk,t);
  _chan.write(tk);
}

// Sends an identifier.
void CLexer::send_ident()
{
  Tokens tk;
  tksetup(tk,IDENTIFIER);
  tk._str.p = yystr();
  tk._str.l = YYLeng();
  _chan.write(tk);
}

// Sends an integer constant.
void CLexer::send_int()
{
  Tokens tk;
  tksetup(tk,INTCONST);
  tk._int = atoi(YYText());
  _chan.write(tk);
}

// Sends a floating-point constant.
void CLexer::send_float()
{
  Tokens tk;
  tksetup(tk,FPCONST);
  tk._fp = strtod(YYText(),0);
  _chan.write(tk);
}

// Sends a character constant.  We only allow single-character constants
// and we return the value in the integer portion (_int) of the structure.
void CLexer::send_char()
{
  Tokens tk;
  tksetup(tk,CHARCONST);
  tk._int = convert_char(yystr()+1,YYLeng()-2);
  _chan.write(tk);
}

// Sends a string literal.  We don't bother with any translation b/c
// we assume that the assembler will handle it.
void CLexer::send_string()
{
  Tokens tk;
  tksetup(tk,STRING_LITERAL);
  tk._str.p = yystr()+1;
  tk._str.l = YYLeng()-2;
  _chan.write(tk);
}

// Sends all-done signal to the channel.
void CLexer::send_alldone()
{
  Tokens tk;
  tksetup(tk,ALL_DONE);
  _chan.write(tk);
}

inline bool isodigit(char x) 
{ 
  return ((x) >= '0' && (x) <= '7'); 
}

inline int hextoint(char x) 
{
  return (isdigit((x)) ? (x) - '0' : ((x) - 'A') + 10);
}

int CLexer::convert_char(const char *str,int len)
{
  if (*str == '\\') {
    ++str;
    if (*str == 'x') {
      // Hex digits- code terminates at first non-hex digit.
      ++str;
      int tmp = 0,foo;
      bool dump = false;
      while (isxdigit(*str)) {
        tmp <<= 4;
        foo = toupper(*str++);
        tmp += hextoint(foo);
        if (dump) {
          return tmp;
        } else {
          dump = true;
        }
      }
      if (dump) {
        return tmp;
      }
      // I don't think we should ever get here.
      return 0;
    } else if (isodigit(*str)) {
      // Octal digits- code terminates at first non-octal digit.
      int tmp = 0;
      while (isodigit(*str)) {
        tmp <<= 3;
        tmp += (*str++ - '0');
      }
      return tmp;
    } else {
      char tmp;
      switch (*str) {
      case 'b':
        tmp = '\b';
        break;
      case 't':
        tmp = '\t';
        break;
      case 'n':
        tmp = '\n';
        break;
      case 'v':
        tmp = '\v';
        break;
      case 'f':
        tmp = '\f';
        break;
      case 'r':
        tmp = '\r';
        break;
      default:
        tmp = *str;
      }
      return tmp;
    }
  }

  return *str;
}
