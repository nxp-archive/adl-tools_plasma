
#include <iostream>

#include "String.h"
#include "CLexer.h"
#include "Channels.h"

using namespace std;

void tokenize(int argc,const char *argv[],CLexer &cl);
void parse(TokChan &tc);

int pMain(int argc,const char *argv[])
{

  if (argc < 2) {
    cerr << "Usage:  " << argv[0] << " <filename>" << endl;
    return 1;
  }

  TokChan tc;
  CLexer cl(tc);

  par {
    tokenize(argc,argv,cl);
    parse(tc);
  }
  return 0;
}

void tokenize(int argc,const char *argv[],CLexer &cl)
{
  // Tokenize all files.
  for (int i = 1; i != argc; ++i) {
    cl.reset(argv[i]);
    cl.yylex();
  }
  cl.send_alldone();
}

void parse(TokChan &tc)
{
  // Parse the token stream.
  Tokens tk;
  do {
    Tokens tk = tc.get();
    switch (tk._tok) {
    case IDENTIFIER:
      cout << "Identifier:  " << String(tk) << endl;
      break;
    case STRING_LITERAL:
      cout << "String Literal:  \"" << String(tk) << "\"" << endl;
      break;      
    case INTCONST:
      cout << "Integer:  " << tk._int << endl;
      break;
    case FPCONST:
      cout << "Float:  " << tk._fp << endl;
      break;
    case ALL_DONE:
      cout << "Done." << endl;
      break;
    default:
      cout << "Token " << tk._tok << " on line " << tk._ln << endl;
    }
  } while (tk._tok >= 0);
}
