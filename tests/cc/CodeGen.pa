//
// Copyright (C) 2005 by Freescale Semiconductor Inc.  All rights reserved.
//
// You may distribute under the terms of the Artistic License, as specified in
// the COPYING file.
//
//
// Main code generation class.  This is designed to be re-entrant so
// that it can handle multiple threads.  Non-reentrant stuff is encapsulated
// within a single mutex class that's not visible in the header.  This
// allows the class to be used by pure C, even though the implementation
// is in Plasma.
//

#include <fstream>
#include <sstream>
#include <stdexcept>
#include <iostream>
#include <list>

#include "Types.h"
#include "Node.h"
#include "SymTab.h"
#include "CodeGen.h"
#include "AsmStore.h"
#include "StackMachine.h"
#include "cparse.h"

using namespace std;
using namespace plasma;

#define ASM(code,a,c) { \
  ostringstream s1,s2; \
  s1 << a; \
  s2 << c; \
  code.o(s1.str(),s2.str().c_str()); \
}

#define ASM1(code,a) { \
  ostringstream s1; \
  s1 << a; \
  code.o(s1.str()); \
}

#define CMT(code,cmt) { \
  ostringstream s1; \
  s1 << cmt; \
  code.c(s1.str()); \
}

// This class stores compile location information.
struct CompileLoc : public gc {
  int   _loc;
  Node *_n;   // 0 => local (location is stack relative.

  // Create a global.
  CompileLoc(Node *n) : _loc(0), _n(n) {};
  // Create a local.
  CompileLoc(int l) : _loc(l), _n(0) {};
};

ostream &operator<< (ostream &o,const CompileLoc &cl)
{
  if (cl._n) {
    o << cl._n->name();
  } else {
    o << cl._loc << "(%ebp)";
  }
  return o;
}

ostream &operator<< (ostream &o,const CompileLoc *cl)
{
  o << *cl;
  return o;
}

typedef list<string> StringList;

// Shared code generation resources go here.
pMutex class SharedData : public gc {
public:
  SharedData(bool print_comments) : 
    _label(0), 
    _strlabel(0), 
    _print_comments(print_comments),
    _globals(print_comments), 
    _strings(print_comments) 
  {};

  pNoMutex bool print_comments() const { return _print_comments; };

  string new_label();
  string new_str_label(String s);

  void global_o(const string &str,const char *comment = 0) { _globals.o(str,comment); };

  void write(ostream &os);
private:
  int _label;
  int _strlabel;
  bool _print_comments;

  // Global assembly data.
  AsmStore _globals;
  // Storage of string literals.
  AsmStore _strings;
};

// Per-thread resources go here.
struct ThreadData : public gc {
  AsmStore      _code;
  StackMachine  _stack;
  string        _end_label;
  StringList    _break_labels;
  StringList    _continue_labels;

  ThreadData (bool pc,int base_fp,const string &el) : 
    _code(pc), 
    _stack(_code,base_fp),
    _end_label(el)
  {};
};

void SharedData::write(ostream &out)
{
  _globals.write(out);
  _strings.write(out);
}

string SharedData::new_label()
{
  ostringstream ss;
  ss << ".L" << _label++;
  return ss.str();
}

string SharedData::new_str_label(String s)
{
  ostringstream ss;
  ss << "LC" << _strlabel++;
  ASM1(_strings,ss.str() << ":");
  ASM1(_strings,"  .ascii \"" << s << "\\0\"");
  return ss.str();
}

CodeGen::CodeGen(bool print_comments) :
  _sdata(new SharedData(print_comments)),
  _tdata(0)
{
}

CodeGen::CodeGen(const CodeGen &cg) :
  _sdata(cg._sdata),
  _tdata(0)
{
}

inline AsmStore &CodeGen::code()
{
  return _tdata->_code;
}

inline StackMachine &CodeGen::stack()
{
  return _tdata->_stack;
}

inline const string &CodeGen::break_label() const 
{ 
  return _tdata->_break_labels.back(); 
}

inline const string &CodeGen::continue_label() const 
{ 
  return _tdata->_continue_labels.back(); 
}

// Push new break and continue labels.
void CodeGen::push_loop_labels(const string &break_label,const string &continue_label)
{
  _tdata->_break_labels.push_back(break_label);
  _tdata->_continue_labels.push_back(continue_label);
}

// Restore old break and continue labels.
void CodeGen::pop_loop_labels()
{
  _tdata->_break_labels.pop_back();
  _tdata->_continue_labels.pop_back();
}

// This creates a copy of the main generator, to be used
// by each thread.
bool CodeGen::codegen_internal(CodeGen codegen,Node *n)
{
  try {
    n->codegen(codegen);
  }
  catch (exception &err) {
    cerr << err.what() << endl;
    return false;
  }
  return true;
}

// Initiates code generation by spawning threads for each
// top-level item.
void CodeGen::genTranslationUnit(TranslationUnit *unit)
{
  BoolCheck results(make_boolcheck(true));
  for (NodeList::iterator i = unit->begin(); i != unit->end(); ++i) {
    results.push_back(spawn(codegen_internal(*this,*i)));
  }
  // If any of the results are false, we've got an error.
  if (!results.check()) {
    throw runtime_error("Compilation failed.");
  }
}

// Does the checking on a single node.
// Catches any exceptions and treats this as
// a checking-phase failure.
bool CodeGen::dochecks_internal(Node *n)
{
  try {
    // Perform type checking.
    n->typecheck();
    // Perform basic flow-control analysis.
    n->flowcontrol();
  }
  catch (exception &err) {
    cerr << err.what() << endl;
    return false;
  }
  return true;
}

// Does the checking phase of the compilation process.
// We spawn a thread for each top-level item, so that checking
// is done in parallel.
bool CodeGen::dochecks(TranslationUnit *unit)
{
  BoolCheck results(make_boolcheck(true));
  for (NodeList::iterator i = unit->begin(); i != unit->end(); ++i) {
    results.push_back(spawn(dochecks_internal( *i )));
  }
  // If any of the results are false, we've got an error.
  if (!results.check()) {
    return false;
  }
  return true;
}

// Writes global data information to the _globals code store.
void CodeGen::handleGlobals(Node *unit)
{
  _sdata->global_o(".global_vars:");
  
  SymTab *symtab = unit->symtab();
  
  for (SymTab::const_iterator i = symtab->begin(); i != symtab->end(); ++i) {
    if (*i) {
      Node *sym = (*i)->_n;
      // Create a global compile location indicator.
      sym->set_compile_loc(new CompileLoc(sym));
      // Add to global data section if it is a variable in this translation unit.
      if (!sym->type()->is_function() && !sym->is_extern()) {
        ostringstream ss;
        ss << "  .comm " << sym->compile_loc() << "," << asm_var_size(sym->type());
        _sdata->global_o(ss.str(),0);
      }
    }
  }
}

// Writes all code to the file specified by the string.
void CodeGen::write(const string &fn,Node *unit) const
{
  ofstream out(fn.c_str());
  if (!out) {
    throw runtime_error ("Could not open output file "+fn);
  }

  out << "# Generated by minicc\n"
      << "# Copyright Freescale Semiconductor Inc (c)\n"
      << "  .text\n";

  unit->writecode(out);

  _sdata->write(out);
}

// Variable size used by the assembler- includes weird multipler.
inline unsigned CodeGen::asm_var_size(Type *t) 
{
  return t->size() * WeirdMultiplier;
}

// Alignment of a type, in bytes.
inline unsigned CodeGen::calc_var_align(Type *t)
{
  return t->size();
}

// Calculate the addresses of all local variables in the
// function and attach them to their respective symbols in
// the function's symbol table(s).
int CodeGen::calc_function_var_addrs(FunctionDefn *fd,int last_fp_loc)
{
  SymTab *symtab = fd->symtab();
  calc_function_arg_addrs(symtab);
  // There should only be one child scope for a function (the body).
  // So we pass it to start off the process.
  return calc_local_var_addrs(*(symtab->childbegin()),last_fp_loc);
}

// Calculate the addresses of all the arguments passed to
// the function.
void CodeGen::calc_function_arg_addrs(SymTab *symtab)
{
  assert(symtab);
  // We iterate over the symbols for this level only- these
  // should correspond to the function's parameters.
  int pn = 0;
  for (SymTab::const_iterator i = symtab->begin(); i != symtab->end(); ++i) {
    if (*i && symtab->is_local(*i)) {
      Node *n = (*i)->_n;
      n->set_compile_loc(new CompileLoc(WordSize*2+pn*WordSize));
      ++pn;
      if (!n->is_used()) {
        Warn(n,"Function argument " << n->name() << " is never used.");
      }
    }
  }  
}

// Calculate the locations of all the local variables defined
// in the function's body and all nested scopes therein.
//
// This model of allocation assumes a 'worst-case' scenario
// where all branches and nested scopes of the function are
// executed; thus the space required for all the local
// variables is allocated on the process' stack at the
// beginning of the function.
// 
// Note, however, that lexical scopes that cannot exist
// at the same time may overlap in memory.  For instance,
// examine the following 'if' statement:
// 
// if (a > 1) {
//   int i;
// } else {
//   int j;
// }
//
// Here 'i' and 'j' will actually occupy the same place in
// memory because it is impossible for both of them to
// exist in memory at the same time.
int CodeGen::calc_local_var_addrs(SymTab *symtab,int last_fp_loc)
{
  int align, bytes_overboard;
  for (SymTab::const_iterator i = symtab->begin(); i != symtab->end(); ++i) {
    if (*i && symtab->is_local(*i)) {
      Node *n = (*i)->_n;
      if (n->is_extern()) {
        n->set_compile_loc(new CompileLoc(n));
        continue;
      }
      last_fp_loc -= n->type()->size();
      
      // Adjust locatio nfor alignment.
      align = calc_var_align(n->type());
      bytes_overboard = (-last_fp_loc) % align;
      if (bytes_overboard) {
        last_fp_loc -= (align - bytes_overboard);
      }
      n->set_compile_loc(new CompileLoc(last_fp_loc));
      if (!n->is_used()) {
        Warn(n,"Local variable " << n->name() << " is never used.");
      }
    }
  }
  int max_last_fp = last_fp_loc;
  for (SymTab::const_children_iterator i = symtab->childbegin(); i != symtab->childend(); ++i) {
    int cur_last_fp = calc_local_var_addrs(*i,last_fp_loc);
    if (cur_last_fp < max_last_fp) {
      max_last_fp = cur_last_fp;
    }
  }
  // Adjust location for alignment, to keep the stack
  // alignment on a word-sized boundary.
  PointerType pt;
  align = calc_var_align(&pt);
  bytes_overboard = (-max_last_fp) % align;
  if (bytes_overboard) {
    max_last_fp -= (align - bytes_overboard);
  }
  return max_last_fp;
}

const char *CodeGen::binop(int op) const
{
  switch (op) {
  case EQ:
    return "sete";
  case NOT_EQ:
    return "setne";
  case GREATER_EQ:
    return "setge";
  case LESS_EQ:
    return "setle";
  case GREATER:
    return "setg";
  case LESS:
    return "setl";
  case PLUS:
  case ADD_ASSIGN:
    return "add";
  case MINUS:
  case SUB_ASSIGN:
    return "sub";
  case ASTERISK:
    return "imul";
  case ASSIGN:
    return "mov";
  default:
    Error1("Unknown binary operator " << op);
  }
}

string CodeGen::new_label()
{
  return _sdata->new_label();
}

string CodeGen::new_str_label(String s)
{
  return _sdata->new_str_label(s);
}

// Pops the top value from the stack machine's stack and
// discard it.  This is used when a statement has a return
// value (for instance, the line 'a = b + 1;') and its
// return value has been pushed onto the stack but there's
// nothing to pop it off.
void CodeGen::empty_stack(Node *n)
{
  if (!stack().empty()) {
    stack().pop(n->type());
    stack().done();
    if (!stack().empty()) {
      throw runtime_error("Register stack isn't empty after pop in empty_stack().");
    }
  }
}

// Visit the node and then empty the stack machine of the
// node's return value, if one exists.
void CodeGen::accept_and_empty_stack(Node *n)
{
  n->codegen(*this);
  empty_stack(n);
}

// Handle an arbitrary list of objects.
void CodeGen::genList(NodeList *nl)
{
  for (NodeList::iterator i = nl->begin(); i != nl->end(); ++i) {
    (*i)->codegen(*this);
  }
}

// Handle a statement list.
void CodeGen::genStatementList(StatementList *sl)
{
  for (NodeList::iterator i = sl->begin(); i != sl->end(); ++i) {
    accept_and_empty_stack(*i);
  }
}

// Handle a function definition.
void CodeGen::genFunctionDefn(FunctionDefn *fd)
{
  int stack_frame_size = calc_function_var_addrs(fd,0);

  // This creates the stack pointer and the code repository.
  _tdata = new ThreadData(_sdata->print_comments(),
                          stack_frame_size,
                          new_label() + "_function_end");

  AsmStore preamble;

  CMT(preamble,"---- BEGIN FUNCTION:  " << fd->name() << " ----");
  CMT(preamble,"Function type:  " << fd->type());

  if (!fd->is_static()) {
    ASM1(preamble,"  .global " << fd->name());
  }
  ASM1(preamble,fd->name() << ":");
  ASM(preamble,"  pushl %ebp","Save old frame pointer.");
  ASM(preamble,"  movl %esp, %ebp","Set new frame pointer.");

  fd->body()->codegen(*this);

  // Figure out the final size of the stack frame, taking into
  // account the stack machine's temporary variables, and
  // insert the code at the beginning of the function.
  if (stack().get_max_fp()) {
    ASM(preamble,"  subl $" << -stack().get_max_fp() << ", %esp",
        "Allocate space for local+temp variables.");
  }

  // Save any callee-save registers that may have been used.
  stack().save_callee_saves(preamble);

  // Add previously generated code.
  code().splice_front(preamble);

  code().o(_tdata->_end_label + ":");

  // Restore any callee-save registers that may have been used.
  stack().load_callee_saves();
  ASM(code(),"  movl %ebp, %esp","Deallocate stack frame.");
  ASM(code(),"  popl %ebp","Restore old stack frame.");
  ASM1(code(),"  ret");

  CMT(code(),"---- END FUNCTION:  " << fd->name() << " ----");

  fd->setcode(&code());
}

void CodeGen::genCompoundStatement(CompoundStatement *cs)
{
  cs->statement_list()->codegen(*this);
}

// Generate code for a conditional.
void CodeGen::genConditional(IfStatement *ifs)
{
  string done_label = new_label() + "_done";
  string else_label = (ifs->else_blk()) ?
    new_label() + "_else"
    : done_label;

  code().c("IF statement - begin");
  ifs->expr()->codegen(*this);
  Operand comparer = stack().pop();
  stack().done();
  ASM(code(),"  testl " << comparer << ", " << comparer,"Test the result.");
  ASM(code(),"  jz " << else_label,"If result is zero, jump to else clause.");

  CMT(code(),"IF statement - THEN clause - begin");
  accept_and_empty_stack(ifs->then_blk());

  CMT(code(),"IF statement - THEN clause - end");
  ASM1(code(),"  jmp " << done_label);
  if (Node *else_blk = ifs->else_blk()) {
    CMT(code(),"IF statement - ELSE clause - begin");
    ASM1(code(),else_label << ":");
    accept_and_empty_stack(else_blk);
    CMT(code(),"IF statement - ELSE clause - end");
  }
  ASM1(code(),done_label << ":");
  code().c("IF statement - end");
}

// Generate code for a while loop.
void CodeGen::genWhileLoop(WhileLoop *wl)
{
  string test_label = new_label() + "_test";
  string done_label = new_label() + "_done";

  push_loop_labels(done_label,test_label);

  CMT(code(),"WHILE loop - begin");

  ASM1(code(),test_label << ":");
  wl->expr()->codegen(*this);

  Operand comparer = stack().pop();
  stack().done();

  ASM(code(),"  testl " << comparer << ", " << comparer,"Test the result.");
  ASM(code(),"  jz " << done_label,"If result is zero, leave while loop.");
  accept_and_empty_stack(wl->stmt());
  ASM(code(),"  jmp " << test_label,"Jump to start of while loop.");
  ASM1(code(),done_label << ":");
  
  CMT(code(),"WHILE loop - end");
  pop_loop_labels();
}

// Generate code for a for loop.
void CodeGen::genForLoop(ForLoop *fl)
{
  string test_label = new_label() + "_test";
  string done_label = new_label() + "_done";

  push_loop_labels(done_label,test_label);

  CMT(code(),"FOR loop - begin");

  accept_and_empty_stack(fl->begin());
  
  ASM1(code(),test_label << ":");
  fl->expr()->codegen(*this);

  Operand comparer = stack().pop();
  stack().done();

  ASM(code(),"  testl " << comparer << ", " << comparer,"Test the result.");
  ASM(code(),"  jz " << done_label,"If result is zero, leave for loop.");
  accept_and_empty_stack(fl->stmt());
  accept_and_empty_stack(fl->end());

  ASM(code(),"  jmp " << test_label,"Jump to start of for loop.");
  ASM1(code(),done_label << ":");
  
  CMT(code(),"FOR loop - end");
  pop_loop_labels();
}

// Generate code for a break statement.
void CodeGen::genBreak(BreakStatement *)
{
  ASM(code(),"  jmp " << break_label(),
      "Loop:  break statement.");
}

// Generate code for a continue statement.
void CodeGen::genContinue(ContinueStatement *)
{
  ASM(code(),"  jmp " << continue_label(),
      "Loop:  continue statement.");
}

// Generate code for a string literal.
void CodeGen::genStringLiteral(StringLiteral *sl)
{
  string label_str = new_str_label(sl->get());
  
  ASM(code(),"  movl $" << label_str 
      << ", " << stack().push(sl->type()),
      "Get addr of string literal.");
}

// Generate code for a numeric constant.
void CodeGen::genConst(Const *c)
{
  ASM(code(),"  movl $" << c->value() 
      << ", " << stack().push(c->type()),
      "Load numeric constant " << c->value());
}

// Generate code for a variable.
void CodeGen::genId(Id *id)
{
  // If we're only supposed to push our address on the
  // stack, not our actual value, do that and exit.
  Node *symbol = id->symbol();
  if (id->output_addr()) {
    ASM(code(),"  leal " << symbol->compile_loc() << ", "
        << stack().push(),
        "Get address of " << symbol->name());
    return;
  }
  const char *inst = (id->type()->size() == CharSize) ? "movzbl" : "movl";
  ASM(code(),"  " << inst << " " << symbol->compile_loc() << ", " 
      << stack().push(id->type()),"Get value of " << symbol->name());  
}

// Generate code for an array expression.
void CodeGen::genArrayExpression(ArrayExpression *ae)
{
  ae->expr()->codegen(*this);
  ae->index()->codegen(*this);

  Operand reg_index = stack().pop(ae->index()->type());
  Operand reg_expr  = stack().pop(ae->expr()->type());
  Operand reg_to = stack().push(ae->type());
  int size = ae->type()->size();

  ostringstream addr_str;
  addr_str << "(" << reg_expr << "," << reg_index << "," << size << ")";
  stack().done();

  if (ae->output_addr()) {
    ASM(code(),"  leal " << addr_str.str() << ", " << reg_to,
        "Load address of pointer array index.");
  } else {
    const char *inst = (ae->type()->size() == CharSize) ? "movzbl" : "movl";
    ASM(code(),"  " << inst << " " << addr_str.str() << ", " << reg_to,
        "Pointer array index dereference.");
  }
}

// Accept the given node and pop its value into a register and
// return the register.  Implicit type conversion is performed,
// if necessary, by the stack machine.
//
// Also, if the node is determined to be a numeric constant,
// the literal value of the constant (e.g., '$15') is returned,
// for purposes of optimization.
Operand CodeGen::accept_and_pop(Node *n)
{
  if (n->is_const()) {
    return Operand(n->value(),Operand::Immed);
  } else {
    n->codegen(*this);
    return stack().pop(n->coerce_to_type());
  }
}

// Generate code for a function call.
void CodeGen::genFunctionExpression(FunctionExpression *fe)
{
  Node *symbol = fe->function()->symbol();
  CMT(code(),"FUNCTION CALL to " << symbol->name() << "() - begin");

  // If we're using any caller-save registers, free them up.
  stack().save_caller_saves();

  // Push args on in reverse order.
  NodeList &args = fe->get_arglist();
  int argnum = args.size();
  for (NodeList::reverse_iterator i = args.rbegin(); i != args.rend(); ++i) {
    Operand arg_reg = accept_and_pop(*i);
    ASM(code(),"  pushl " << arg_reg,"Push arg " << argnum);
    stack().done();
    --argnum;
  }

  ASM(code(),"  call " << symbol->compile_loc(),
      "Call " << symbol->name() << "()");

  // The function will place its return value in register %eax.
  // So, we'll push a register from the stack and ask it to give
  // us %eax.
  Operand result = stack().push(symbol->type()->get_return_type(),Operand::eax);
  
  // If we got eax, don't do anything, because our return
  // value is already in there.  Otherwise, move it.
  //
  // (Note that with current implementationm, we should always
  // get %eax).
  if (result != Operand(Operand::eax)) {
    ASM(code(),"  movl %eax, " << result,"Copy return value.");
  }
  int arg_stack_size = args.size() * WordSize;

  if (arg_stack_size > 0) {
    ASM(code(),"  addl $" << arg_stack_size << ", %esp",
        "Deallocate argument stack.");
  }

  CMT(code(),"FUNCTION CALL to " << symbol->name() << "() - end");
}

// Generate code for a return statement.
void CodeGen::genReturn(ReturnStatement *rs)
{
  Operand return_reg = accept_and_pop(rs->expr());

  ASM(code(),"  movl " << return_reg << ", %eax","Set return value.");
  ASM(code(),"  jmp " << _tdata->_end_label,"Exit function.");

  stack().done();
}

// Returns a type suffix based upon a supplied type size.
const char *type_suffix(int size)
{
  return (size == 4) ? "l" : "b";
}

// Performs an assignment operation (=, +=, etc) on the given
// Binop node.
void CodeGen::binop_assign(Binop *bo)
{
  bo->left()->codegen(*this);
  Operand right_reg = accept_and_pop(bo->right());
  Operand left_reg = stack().pop();

  string instr = string(binop(bo->op())) + type_suffix(bo->type()->size());

  bool is_char = (bo->type()->size() == CharSize);

  if (is_char) {
    right_reg.setlo();
  }

  ASM(code(),"  " << instr << " " << right_reg << ", (" << left_reg << ")",
      "Perform assignment '" << bo->op_str() << "'");

  // Note:  Very inefficient code, especially if result isn't used afterwards.
  const char *inst = (is_char) ? "movzbl" : "movl";
  ASM(code(),"  " << inst << " (" << left_reg << "), " << stack().push(bo->type()),
      "Copy assignment result to register.");
  stack().done();
}

// Performs an arithmetic operation (+, -, etc) on the given
// Binop node.
void CodeGen::binop_arith(Binop *bo)
{
  bo->left()->codegen(*this);
  Operand right_reg = accept_and_pop(bo->right());
  Operand left_reg = stack().pop(bo->left()->coerce_to_type());

  string instr = string(binop(bo->op())) + type_suffix(bo->type()->size());  

  bool is_char = (bo->type()->size() == CharSize);

  if (is_char) {
    right_reg.setlo();
    left_reg.setlo();
  }

  ASM(code(),"  " << instr << " " << right_reg << ", " << left_reg,
      "Perform '" << bo->op_str() << "'");
  stack().done();

  // Here we are relying on the fact that left_reg is now free
  // from the last pop(), so we should be able to push it
  // back onto the stack machine.
  Operand new_reg = stack().push(bo->type(),left_reg.value());
  if (new_reg != left_reg) {
    throw runtime_error("Binop push() isn't the same as last pop()!");
  }
}

// Performs a comparison operation (>, ==, etc) on the given
// Binop node.
void CodeGen::binop_compare(Binop *bo)
{
  bo->left()->codegen(*this);
  Operand right_reg = accept_and_pop(bo->right());
  Operand left_reg = stack().pop(bo->left()->coerce_to_type());
  stack().done();

  ASM(code(),"  cmpl " << right_reg << ", " << left_reg,
      "Compare " << left_reg << " to " << right_reg);

  // TODO: this could cause errors, if push() generates
  // mov instructions...  not sure if mov instructions
  // change the flags though, they probably shouldn't
  // since they're not arithmetic operations.
  BaseType bt_char(BaseType::Char);
  Operand reg = stack().push(&bt_char);
  Operand byte_reg = reg;
  byte_reg.setlo();
  ASM(code(),"  " << binop(bo->op()) << " " << byte_reg,
      "Perform '" << bo->op_str() << "'");
  ASM(code(),"  movzbl " << byte_reg << ", " << reg,
      "Zero-extend the boolean result.");
}

// Generate code for a binary operation.
void CodeGen::genBinop(Binop *bo)
{
  if (bo->is_assign_op()) {
    binop_assign(bo);
  } else if (bo->is_compare_op()) {
    binop_compare(bo);
  } else {
    binop_arith(bo);
  }
}

// Generate code for a negative object.
void CodeGen::genNegative(Negative *n)
{
  n->expr()->codegen(*this);
  ASM(code(),"  negl " << stack().peek(),
      "Perform unary negation.");
}

// Generate code for a pointer operation.
void CodeGen::genPointer(Pointer *p)
{
  p->expr()->codegen(*this);

  if (p->output_addr()) {
    ASM(code()," ","(Getting pointer target address via '*' here.)");
    return;
  }
  Operand reg_from = stack().pop(p->expr()->type());
  Operand reg_to = stack().push(p->type());
  
  bool is_char = (p->type()->size() == CharSize);
  const char *inst = (is_char) ? "movzbl" : "movl";

  ASM(code(),"  " << inst << " (" << reg_from << "), " << reg_to,
      "Pointer dereference.");
  stack().done();
}

// Generate code for an address-of operation.
void CodeGen::genAddrOf(AddrOf *ao)
{
  ao->expr()->codegen(*this);

  ASM(code()," ","(Address-of operator '&' used here.)");
  stack().force_type_change(ao->type());
}
