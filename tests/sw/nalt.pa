//
// afor test w/2 processors.
//

#include "plasma.h"

using namespace plasma;
using namespace std;

const int num_terms = 10;
const int count     = 5;  // number of messages to be sent on each channel.

Processor Cpu1;

struct Main {
  struct Msg {
    int source;         // index of originating terminal.
    int time;           // origination time of msg.
  };

  typedef Channel<Main::Msg> Chan;
  typedef vector<Main::Chan> Chans;

  void user(Chan &out, int index, int count) 
  {
    int msgcnt = 0;
    Msg data;

    printf ("Starting user %d.\n",index);
    while(msgcnt < count) {
      msgcnt = msgcnt + 1;
      printf("User %d:  Sending msg num=%d\n", index, msgcnt);
      pBusy (1);
      data.source = msgcnt;
      out.write(data);
    }
  };

  void comms_in(Chans &in) 
  {
    int cnt2 = 0;        // number of messages received.
    printf("Comms_in started.\n");
    while(1) {
      afor (unsigned i = 0;i != in.size(); ++i) {
        in[i].port(Msg data) {
          printf("Comm 0:  Chan Num=%d  ", i);
          cnt2 = cnt2 + 1;
          printf(" Rcvd msg num=%d\n", cnt2);
          if (cnt2 >= (count * num_terms)) {
            printf ("Done.\n");
            pExit(0);
          }
        }
      }
    }
  }
};

void pSetup(ConfigParms &cp)
{
  cp._busyokay = true;
}

int pMain(int,const char*[]) 
{
  Main m;
  Main::Chans terms_to_comms(num_terms);

  par {
    on (Cpu1) {
      m.comms_in(terms_to_comms);
    }
    pfor (int i = 0; i != num_terms; ++i) {
      on (Cpu1) { 
        m.user(terms_to_comms[i], i, count);
      }
    }
  }
  return 0;
}
