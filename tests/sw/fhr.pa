//
// test program to pretend to be joke fhr system
// as per dick brown's picture 23 may 1990
// changed by wm on 1/27/92.  Random streams, etc.
//

#include "plasma.h"

#include "Random.h"

using namespace std;
using namespace plasma;

Processor Unix;
Processor Dps6;
Processors Comms(25);

typedef Channel<int> Chan;
typedef vector<Chan,traceable_allocator<Chan> > Chans;

Random<> Rand(5);

void give(int n)
{
  printf ("\nUser %d about to output.\n",n);
}

void got(int n) 
{
  printf("\nUser %d has response.\n",n);
}

int user(Chan &to_system, Chan &from_system,
          int user_num, int limit) 
{
  // the user waits a bit to start up, then outputs a value down the
  // to_system channel

  ptime_t total_time = 0;
      
  printf("\nUser %d has started:  %d transactions.\n",user_num,limit);
  pDelay(Rand.uniform(1, 1, 100));

  for (int i = 0; i != limit; ++i) {
    ptime_t this_time = pTime();
    give(user_num);
    to_system.write(user_num);
    from_system.get();
    got(user_num);
    this_time = pTime() - this_time;
    total_time += this_time;
    pDelay(Rand.uniform(2, 0, 100));        //think time independed random stream.
    if (i && ((i % 100) == 0)) {
      printf("\nUser %d:  Transaction %d  %lld tps.\n",user_num,i,total_time/i);
    } 
  }

  printf("\nUser %d stopping:  Did %d transactions.",user_num,limit);
  printf("\nTotal time waiting for transactions was %lld",total_time);
  printf("\nGiving average response time of %lld.\n",total_time/limit);
  return total_time;
}

//////////////////////////// tpri /////////////////////////////

void tpri(Chans &in, Chan &oracle, Chan &rdb) 
{
  int looping = 1, chooser = 0;
  printf("\nTPRI has started");
  pDelay(Rand.uniform(1, 5, 30));
  while (1) {
    //printf("\nTpri waiting for input");
    
    afor (unsigned i = 0; i != in.size(); ++i) {
      in[i].port(int l) { 
        looping = l;
      }
    }
    //printf("\nTpri got input on %d.\n",looping);
    pBusy(Rand.uniform(4, 10, 20));
    //printf("\nTpri thought");
    chooser = chooser + 1;
    if (chooser & 3 == 0) {
      // talk to the rdb
      //say("\n..tell rdb");
      rdb.write(looping);
    } else {
      // talk to oracle
      //printf("\n..tell oracle");
      oracle.write(looping);
    }
  }
}
  
////////////////////////////// oracle //////////////////////// 

void oracle(Chan &in, Chan &out ) 
{
  int looping = 1;
  
  printf("\nOracle starting");
  pDelay(Rand.uniform(1, 5, 17));
  while (1) {
    //printf("\nOracle waiting for input");
    looping = in.get();
    //printf("\n oracle got it");
    pBusy(Rand.uniform(4, 20, 30));
    //printf("\noracle thought");
    out.write(looping);
    //printf("\n oracle responded");
  }
}

/////////////////////// tpro ////////////////////////
  
void tpro(Chan &oracle, Chan &rdb, Chans &terminal) 
{
  printf("\nTPRO has started");
  pDelay(Rand.uniform(1, 7, 23));
  while (1) {
    //printf("\nTpro waiting on input");
    alt {
      oracle.port(int looping) {
        // got stuff from oracle
        //printf("\nTpro gotit from oracle");
        pBusy(Rand.uniform(1, 20, 55));
        //printf("\nTpro thought");
        terminal[looping].write(looping);
       	printf("\nTpro output to terminal");
      }
      rdb.port(int looping) {
        // got stuff from rdb
        //printf("\nTpro gotit from rdb");
        pBusy(Rand.uniform(1, 20, 55));
        //printf("\nTpro thought");
        terminal[looping].write(looping);
        //printf("\nTpro output to terminal");
      }
    }
  }
}
    
  
//////////////////// rdb ///////////////////////

void rdb(Chan &in, Chan &out) 
{
  printf("\nRdb started..");
  pDelay(Rand.uniform(3, 10, 33));
  while (1) {
    //printf("\nRdb waiting");
    int looping = in.get();
    //printf("\nRdb got input");
    pBusy(15);
    //printf("\nRdb thought");
    out.write(looping);
    //say("\nRdb output");
  }
}
    
////////////////////// configuration ////////////////////

void pSetup(ConfigParms &cp)
{
  cp._busyokay = true;
}

int pMain(int,const char*[]) {
  const int num_users = 10;

  Chans 
    user_tpri(num_users),
    tpro_user(num_users);

  Chan tpri_oracle, tpri_rdb, oracle_tpro, rdb_tpro;
  printf("\nThe FHR emulator springs into life..");

  par {
    on (Unix) { oracle(tpri_oracle, oracle_tpro); }
    on (Dps6) { rdb(tpri_rdb, rdb_tpro); }
    on (Dps6) { tpri(user_tpri, tpri_oracle, tpri_rdb); }
    on (Dps6) { tpro(oracle_tpro, rdb_tpro, tpro_user); }
    {
      int total_response_time = 0;
      const int num_transacs = 500;
      pfor (int i = 0; i != num_users; ++i) {
        on (Comms[i]) { 
          total_response_time += user(user_tpri[i], tpro_user[i], i, num_transacs);
        }
      }
      printf("\nAll users finished..\n\tTotal time in transactions %lld "
             "for average time per transaction of %d\n",pTime(),
             total_response_time/num_transacs * num_users);
      pExit(0);
    }
  }
  return 0;
}
