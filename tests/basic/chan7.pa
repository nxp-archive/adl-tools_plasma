//
// Tests the afor loop using a non-integer iterator,
// a non-integer type for the channel, and a default block.
//

#include <assert.h>
#include <stdio.h>
#include <plasma.h>

typedef std::pair<int,int> IntPair;
typedef plasma::Channel<IntPair> IntChan;
typedef std::vector<IntChan> ChanVect;

void producer(int val,int index,IntChan &chan) 
{
  for (int i = 0; i != 10; ++i) {
    chan.write(std::make_pair(val+i,index));
    for (int j = 0; j != 100000; ++j) {
      int x = x + 1;
    }
  }
  chan.write(std::make_pair(-1,index));
  printf ("Producer done.\n");
}

void consumer(ChanVect &channels)
{
  int donecount = 0;
  while (donecount < (int)channels.size()) {
    afor (ChanVect::iterator i = channels.begin(); i != channels.end(); ++i) {
      port (IntPair v; *i;) {
        printf ("Got a value from port %d:  %d\n",v.second,v.first);
        if (v.first < 0) ++donecount;
      }
      {
        for (int j = 0; j != 1000000; ++j) {
          int x = 1;
        }
        printf ("No value present.\n");
      }      
    }
  }
  printf ("Consumer done.\n");
}

int pMain(int argc,const char *argv[])
{ 
  ChanVect chans(3);

  // First thread is the consumer, so producers are
  // offset by one.
  pfor(int i = 0,x = 3; i != (int)chans.size()+1; ++i, x *= 10) {
    if (!i) {
      consumer(chans);
    } else {
      producer(x,i-1,chans[i-1]);
    }
  }
  printf ("Done.\n");
  return 0;
}
