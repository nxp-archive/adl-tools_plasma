//
// Test of spawn w/function calls.
// We test:
// 1.  Explicit function call.
// 2.  Call of a function pointer.
//
#include <iostream>

using namespace std;
using namespace plasma;

double foo(double a,double b)
{
  int xx = 0;
  for (int i = 0; i != 100000000; ++i) {
    xx += 1;
  }
  return a*a + b*b;
}

int infloop(int p)
{
  int yy = 0;
  while (1) {
    yy += 1;
  }
  return p;
}

double pi()
{
  return 3.14159;
}

typedef double (*Fptr2)(double,double);
typedef double (*Fptr0)();

int pMain(int argc,const char *argv[])
{ 
  Fptr2 a = foo;
  Fptr0 b = pi;

  Result<double> r1 = spawn(foo(1.1,2.2));
  Result<double> r2 = spawn(foo(2.7,9.8));
  Result<double> r3 = spawn(foo(100.45,3.59));
  Result<double> r4 = spawn(pi());
  cout << "Result is:  " << r1.value() << ", " << r2.value() << ", " << r3.value() << ", " << r4.value() << endl;

  Result<double> r5 = spawn(a(45.20,90.34));
  Result<double> r6 = spawn(b());
  r6.wait();
  cout << "Result is:  " << r5.value() << ", " << r6.value() << endl;

  // We launch a thread that will never end, then explicitly kill it.
  // The result should be the original constructor value of 0.
  Result<int> r7 = spawn(infloop(20));
  r7.kill();
  cout << "Result is:  " << r7.value() << endl;
  
  return 0;
}
