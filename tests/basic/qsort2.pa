//
// Copyright (C) 2005 by Freescale Semiconductor Inc.  All rights reserved.
//
// You may distribute under the terms of the Artistic License, as specified in
// the COPYING file.
//
//
// This implements a parallel qsort algorithm w/busy statements
// in order to be able to see how adding processors affects performance.
//

#include <iostream>
#include <vector>

using namespace std;
using namespace plasma;

typedef vector<unsigned> Data;

// Minimum size below which we do not spawn new threads.
const int MIN = 10;

// Amount of computation attributed to the swap routine.
const int Think = 100;

// Swap two values
static inline void swap(Data &a, int x, int y)
{
  unsigned z = a[x];
  a[x] = a[y];
  a[y] = z;
}

// Split <a/l/r> by pivot <e> into <a/l/x0> and <a/y0/r>
void split(Data &a, int l, int r, unsigned e, int *x0, int *y0)
{
  int x = l;
  int y = r-1;
  int c = 0;
  do {
    while (a[x] < e) x++;
    while (a[y] > e) y--;
    if (x < y) {
      swap(a, x, y);
      ++c;
      x++; y--;
    }
    else if (x == y) {
      break;
    }
  }
  while (x <= y);
  *x0 = x; 
  *y0 = y+1;
  // We think based upon the number of swaps made.
  pBusy(Think*c);
}

// Sort <a/l/r> sequentially.
int qs0(Data &a, int l, int r)
{
  if (l < r) 
    {
      unsigned e = a[(l+r)/2];
      int m0, m1;
      split(a, l, r, e, &m0, &m1);
      qs0(a, l, m0);
      qs0(a, m1, r);
    }
  return(0);
}

// Sort <a/l/r> in parallel.
int qs(Data &a, int l, int r)
{
  if (r-l < MIN) return(qs0(a, l, r));
  unsigned e = a[(l+r)/2];
  int m0, m1;
  split(a, l, r, e, &m0, &m1);
  par {
    qs(a,l,m0);
    qs(a,m1,r);
  }
  return(0);
}

// Sort <a>.
void qsort(Data &a)
{
  qs(a, 0, a.size());
}

void pSetup(ConfigParms &cp)
{
  cp._numpriorities = 2;
  cp._busyokay = true;
}

int pMain(int argc,const char *argv[]) 
{
  int S = 1000;
  int NP = 1;

  if (argc >= 2) {
    if ( (NP = atoi(argv[1])) <= 0) {
      cerr << "Usage:  " << argv[0] << " [num procs (default is 1)]\n";
      return 1;
    }
  }

  cout << "Number of processors:  " << NP << endl;
  Processors procs(NP,"processors",true);

  par {
    on (procs[0],0) {
      cout << "Sorting with size " << S << endl;
      Data a(S);
      for (int j = 0; j < S; j++) {
        a[j] = rand();
      }
      qsort(a);
    }
  }

  cout << "Finish time:  " << pTime() << endl;

  return 0;
}
