//
// Tests an alt w/multiple afor loops and a port statement and
// a default block.
//
#include <assert.h>
#include <stdio.h>
#include <plasma.h>

typedef plasma::Channel<int>    IntChan;
typedef plasma::Channel<double> FloatChan;

typedef std::vector<IntChan> IntChanVect;
typedef std::vector<FloatChan> FloatChanVect;

int iproducer(int val,IntChan &chan) 
{
  for (int i = 0; i != 10; ++i) {
    chan.write(val+i);
    for (int j = 0; j != 100000; ++j) {
      int x = x + 1;
    }
  }
  chan.write(-1);
  printf ("Producer done.\n");
  return 0;
}

int fproducer(double val,FloatChan &chan) 
{
  for (int i = 0; i != 10; ++i) {
    chan.write(val+i);
    for (int j = 0; j != 100000; ++j) {
      int x = x + 1;
    }
  }
  chan.write(-1);
  printf ("Producer done.\n");
  return 0;
}

int consumer(IntChanVect &ichannels,FloatChanVect &fchannels,IntChan &xc)
{
  const int ibase = 1;
  const int fbase = ichannels.size()+ibase;
  int donecount = 0;
  const int stop = (int)(ichannels.size()+fchannels.size());
  while (donecount < stop) {
    alt {
      afor (int i = 0; i != (int)ichannels.size(); ++i) {
        port (int v; ichannels[i];) {
          printf ("Got a value from port %d:  %d\n",i+ibase,v);
          if (v < 0) ++donecount;
        }
      }
      afor (std::pair<FloatChanVect::iterator,int> j = std::make_pair(fchannels.begin(),0);
            j.first != fchannels.end(); ++j.first,++j.second) {
        port (double v; *(j.first);) {
          printf ("Got a value from port %d:  %f\n",j.second+fbase,v);
          if (v < 0) ++donecount;
        }
      }
      alt {
        port (int v; xc;) {
          printf ("Got a value from port 0:  %d\n",v);
        }
      }
      {
        for (int j = 0; j != 1000000; ++j) {
          int x = 1;
        }
        printf ("No value present.\n");      
      }
    }
  }
  printf ("Consumer done.\n");
  return 0;
}

int pMain(int argc,const char *argv[])
{ 
  const int NumChanI = 6;
  const int NumChanF = 4;
  IntChanVect   ichannels(NumChanI);
  FloatChanVect fchannels(NumChanF);
  IntChan extra;

  typedef std::vector<plasma::Result<int> > Results;
  Results results;

  results.push_back(spawn(iproducer(60,extra)));
  results.push_back(spawn(consumer(ichannels,fchannels,extra)));
  for(int i = 0,x = 20; i != NumChanI; ++i, x *= 10) {
    results.push_back(spawn(iproducer(x,ichannels[i])));
  }
  double xf = 2.3;
  for(int i = 0; i != NumChanI; ++i, xf *= 1.5) {
    results.push_back(spawn(fproducer(xf,fchannels[i])));
  }

  for (Results::iterator i = results.begin(); i != results.end(); ++i) {
    i->wait();
  }

  printf ("Done.\n");
  return 0;
}
