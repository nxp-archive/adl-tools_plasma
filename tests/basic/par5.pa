//
// Tests that nested par blocks work correctly wrt. variable declarations.
//
#include <iostream>
#include <iterator>

using namespace std;
using namespace plasma;

typedef vector<double> Doubles;

struct Foo {
  void stuff() {};
  typedef vector<int> Ints;
  void a()
  {
    Doubles results(5);
    par {
      {
        double a = 1.1, b = 1.2, c = 1.3;
        par {
          {
            results[0] = a;
            cout << "Done with block " << a << ".\n";
          }
          {
            for (int i = 0; i != 1; ++i) {
              par {
                cout << "Done with block " << b+.01 << ".\n";
                cout << "Done with block " << b+.02 << ".\n";
              }
            }
            results[1] = b;
          }
          {
            results[2] = c;
            cout << "Done with block " << c << ".\n";
          }
        }
      }
      {
        results[3] = 4;
        cout << "Done with block 2.\n";
      }
      {
        results[4] = 5;
        cout << "Done with block 3.\n";
      }
    }
    cout << "Result is:  ";
    ostream_iterator<double> oi(cout," ");
    copy(results.begin(),results.end(),oi);
    cout << endl;
  }
  void b();
};

void Foo::b()
{
  Ints results(5);
  par {
    {
      int a = 1,b=2,c=3;
      par {
        {
          results[0] = a*10;
          cout << "Done with block 10.1.\n";
        }
        {
          results[1] = b*10;
          cout << "Done with block 10.2.\n";
        }
        {
          results[2] = c*10;
          cout << "Done with block 10.3.\n";
        }
      }
    }
    {
      results[3] = 40;
      cout << "Done with block 20.\n";
    }
    {
      results[4] = 50;
      cout << "Done with block 30.\n";
    }
  }
  cout << "Result is:  ";
  ostream_iterator<int> oi(cout," ");
  copy(results.begin(),results.end(),oi);
  cout << endl;
}

int pMain(int argc,const char *argv[])
{
  Foo f;
  f.a();
  f.b();
  cout << "Done." << endl;
  return 0;
}
