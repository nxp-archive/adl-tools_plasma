//
// Tests to make sure that a channel will work correctly if used within an
// alt block where the user does not map the result to a variable.  We need
// to make sure that the consumer will drain a value from the channel even
// though the user doesn't require the value.
//
#include <assert.h>
#include <stdio.h>
#include <plasma.h>

using namespace std;
using namespace plasma;

typedef Channel<int> IntChan;

Processor P;
Processor C;

void producer(int val,IntChan &chan) 
{
  for (int i = 0; i != 10; ++i) {
    if(pCurProc() != P) {
      pAbort ("Producer's processor has a mismatch.\n");
    }
    chan.write(val+i);
    mprintf ("Producer wrote %d.\n",i);
  }
  chan.write(-1);
  mprintf ("Producer done.\n");
}

void consumer(IntChan &chan)
{
  bool quit = false;
  int count = 0;
  while (!quit) {
    if (pCurProc() != C) {
      pAbort ("Consumer's processor has a mismatch.\n");
    }
    alt {
      chan.port () {
        mprintf ("Got a value from port c0:  count is %d\n",count++);
        if (count == 10) { quit = true; };
      }
    }
  }
  mprintf ("Consumer done.\n");
}

int pMain(int argc,const char *argv[])
{ 
  IntChan channel;

  par {
    on (P) { producer(10,channel); }
    on (C) { consumer(channel); }
  }
  mprintf ("Done.\n");
  return 0;
}
