//
// Copyright (C) 2005 by Freescale Semiconductor Inc.  All rights reserved.
//
// You may distribute under the terms of the Artistic License, as specified in
// the COPYING file.
//
//
// Simple channel test using several producers all writing
// to a single consumer.  It demoonstrates the alt block w/o
// a default case.
//

#include <assert.h>
#include <stdio.h>
#include <plasma.h>

typedef plasma::Channel<int> IntChan;

void producer(int val,IntChan &chan) 
{
  for (int i = 0; i != 10; ++i) {
    chan.write(val+i);
    for (int j = 0; j != 100000; ++j) {
      int x = x + 1;
    }
  }
  chan.write(-1);
  plasma::mprintf ("Producer done.\n");
}

void consumer(IntChan &c0,IntChan &c1,IntChan &c2,IntChan &c3)
{
  int donecount = 0;
  while (donecount <  4) {
    alt {
      c0.port (int v) {
        plasma::mprintf ("Got a value from port c0:  %d\n",v);
        if (v < 0) ++donecount;
      }
      c1.port (int v) {
        plasma::mprintf ("Got a value from port c1:  %d\n",v);
        if (v < 0) ++donecount;
      }
      c2.port (int v) {
        plasma::mprintf ("Got a value from port c2:  %d\n",v);
        if (v < 0) ++donecount;
      }
      c3.port (int v) {
        plasma::mprintf ("Got a value from port c3:  %d\n",v);
        if (v < 0) ++donecount;
      }
    }
  }
  plasma::mprintf ("Consumer done.\n");
}

int pMain(int argc,const char *argv[])
{ 
  const int NumChan = 4;
  IntChan channels[NumChan];

  par {
    producer(10,channels[0]);
    producer(100,channels[1]);
    producer(1000,channels[2]);
    producer(10000,channels[3]);
    consumer(channels[0],channels[1],channels[2],channels[3]);
  }
  plasma::mprintf ("Done.\n");
  return 0;
}
