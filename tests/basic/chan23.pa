//
// Copyright (C) 2005 by Freescale Semiconductor Inc.  All rights reserved.
//
// You may distribute under the terms of the Artistic License, as specified in
// the COPYING file.
//
//
// Tests to make sure that we can clear a channel of all data and pending
// writers.
//

#include <iostream>

#include "plasma.h"

using namespace plasma;
using namespace std;

typedef Channel<int> IntChan;

void producer(IntChan &c,int val)
{
  cout << "Wrote " << val << endl;
  c.write(val);
}

void pSetup(ConfigParms &cp)
{
  cp._busyokay = true;
}

int pMain(int argc,const char *argv[])
{
  IntChan c;

  // Create a process trying to write to the channel.
  spawn(producer(c,10));

  cout << "Done with writes." << endl;

  // Delay in order to make sure that it gets scheduled.
  pDelay(1);

  // Now clear the channel.  This should eliminate the writers.
  c.clear();

  cout << "Did the clear." << endl;

  // Now try and write something.  If this didn't work, we'll exit
  // immediately due to deadlock.
  c.write(100);

  // Now print out anything in the channel.  We delay to make sure that
  // any pending writers (there shouldn't be any!) are scheduled.
  while (c.ready()) {
    cout << "Result:  " << c.get() << endl;
    pDelay(1);
  }

  return 0;
}
