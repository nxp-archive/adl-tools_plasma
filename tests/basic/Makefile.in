# Makefile.in generated by automake 1.11.1 from Makefile.am.
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

#
# Adding new Plasma tests is more complicated than it should be because
# Automake doesn't know that Plasma's dependencies can be handled like those
# of C++.  To add a new test, add an entry to check_PROGRAMS (call it <test> for
# our purposes).  Then create a variable called <test>_SOURCES and list source
# files.  If adding a plasma test, add a new entry to DEP_FILES and include the
# relevant dependency file (.Po).
#
VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
check_PROGRAMS = par1$(EXEEXT) par2$(EXEEXT) par3$(EXEEXT) \
	par4$(EXEEXT) par5$(EXEEXT) par6$(EXEEXT) par7$(EXEEXT) \
	par8$(EXEEXT) par9$(EXEEXT) par10$(EXEEXT) qsort1$(EXEEXT) \
	qsort2$(EXEEXT) chan1$(EXEEXT) chan2$(EXEEXT) chan3$(EXEEXT) \
	chan4$(EXEEXT) chan5$(EXEEXT) chan6$(EXEEXT) chan7$(EXEEXT) \
	chan8$(EXEEXT) chan9$(EXEEXT) chan10$(EXEEXT) chan11$(EXEEXT) \
	chan12$(EXEEXT) chan13$(EXEEXT) chan14$(EXEEXT) \
	chan15$(EXEEXT) chan16$(EXEEXT) chan17$(EXEEXT) \
	chan18$(EXEEXT) chan19$(EXEEXT) chan20$(EXEEXT) \
	chan21$(EXEEXT) chan22$(EXEEXT) chan23$(EXEEXT) \
	chan24$(EXEEXT) chan25$(EXEEXT) spawn1$(EXEEXT) \
	spawn2$(EXEEXT) spawn3$(EXEEXT) spawn4$(EXEEXT) \
	mutex1$(EXEEXT) pri1$(EXEEXT) pri2$(EXEEXT) pri3$(EXEEXT) \
	pri4$(EXEEXT) pri5$(EXEEXT) pri6$(EXEEXT) pri7$(EXEEXT) \
	pri8$(EXEEXT) proc1$(EXEEXT) proc2$(EXEEXT) proc3$(EXEEXT) \
	proc4$(EXEEXT) proc5$(EXEEXT) proc6$(EXEEXT) proc7$(EXEEXT) \
	proc8$(EXEEXT) proc9$(EXEEXT) proc10$(EXEEXT) time1$(EXEEXT) \
	time2$(EXEEXT) time3$(EXEEXT) time4$(EXEEXT) time5$(EXEEXT) \
	rand1$(EXEEXT) rand2$(EXEEXT) clock1$(EXEEXT) clock2$(EXEEXT) \
	clock3$(EXEEXT) clock4$(EXEEXT) clock5$(EXEEXT) \
	clock6$(EXEEXT) clock7$(EXEEXT) clock8$(EXEEXT) \
	clock9$(EXEEXT) clock10$(EXEEXT) clock11$(EXEEXT) \
	clock12$(EXEEXT) clock13$(EXEEXT) clock14$(EXEEXT) \
	clock15$(EXEEXT) quantity1$(EXEEXT) connect1$(EXEEXT) \
	gc1$(EXEEXT)
DIST_COMMON = README $(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	$(top_srcdir)/tests/Makefile.rules
subdir = tests/basic
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/macros/argz.m4 \
	$(top_srcdir)/macros/cpp-setup.m4 \
	$(top_srcdir)/macros/docgen.m4 $(top_srcdir)/macros/flex.m4 \
	$(top_srcdir)/macros/general.m4 \
	$(top_srcdir)/macros/libtool.m4 $(top_srcdir)/macros/ltdl.m4 \
	$(top_srcdir)/macros/ltoptions.m4 \
	$(top_srcdir)/macros/ltsugar.m4 \
	$(top_srcdir)/macros/ltversion.m4 \
	$(top_srcdir)/macros/lt~obsolete.m4 $(top_srcdir)/macros/qt.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am_chan1_OBJECTS = chan1.$(OBJEXT)
chan1_OBJECTS = $(am_chan1_OBJECTS)
am__DEPENDENCIES_1 =
am__DEPENDENCIES_2 = $(am__DEPENDENCIES_1)
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am_chan10_OBJECTS = chan10.$(OBJEXT)
chan10_OBJECTS = $(am_chan10_OBJECTS)
chan10_LDADD = $(LDADD)
am_chan11_OBJECTS = chan11.$(OBJEXT)
chan11_OBJECTS = $(am_chan11_OBJECTS)
chan11_LDADD = $(LDADD)
am_chan12_OBJECTS = chan12.$(OBJEXT)
chan12_OBJECTS = $(am_chan12_OBJECTS)
chan12_LDADD = $(LDADD)
am_chan13_OBJECTS = chan13.$(OBJEXT)
chan13_OBJECTS = $(am_chan13_OBJECTS)
chan13_LDADD = $(LDADD)
am_chan14_OBJECTS = chan14.$(OBJEXT)
chan14_OBJECTS = $(am_chan14_OBJECTS)
chan14_LDADD = $(LDADD)
am_chan15_OBJECTS = chan15.$(OBJEXT)
chan15_OBJECTS = $(am_chan15_OBJECTS)
chan15_LDADD = $(LDADD)
am_chan16_OBJECTS = chan16.$(OBJEXT)
chan16_OBJECTS = $(am_chan16_OBJECTS)
chan16_LDADD = $(LDADD)
am_chan17_OBJECTS = chan17.$(OBJEXT)
chan17_OBJECTS = $(am_chan17_OBJECTS)
chan17_LDADD = $(LDADD)
am_chan18_OBJECTS = chan18.$(OBJEXT)
chan18_OBJECTS = $(am_chan18_OBJECTS)
chan18_LDADD = $(LDADD)
am_chan19_OBJECTS = chan19.$(OBJEXT)
chan19_OBJECTS = $(am_chan19_OBJECTS)
chan19_LDADD = $(LDADD)
am_chan2_OBJECTS = chan2.$(OBJEXT)
chan2_OBJECTS = $(am_chan2_OBJECTS)
chan2_LDADD = $(LDADD)
am_chan20_OBJECTS = chan20.$(OBJEXT)
chan20_OBJECTS = $(am_chan20_OBJECTS)
chan20_LDADD = $(LDADD)
am_chan21_OBJECTS = chan21.$(OBJEXT)
chan21_OBJECTS = $(am_chan21_OBJECTS)
chan21_LDADD = $(LDADD)
am_chan22_OBJECTS = chan22.$(OBJEXT)
chan22_OBJECTS = $(am_chan22_OBJECTS)
chan22_LDADD = $(LDADD)
am_chan23_OBJECTS = chan23.$(OBJEXT)
chan23_OBJECTS = $(am_chan23_OBJECTS)
chan23_LDADD = $(LDADD)
am_chan24_OBJECTS = chan24.$(OBJEXT)
chan24_OBJECTS = $(am_chan24_OBJECTS)
chan24_LDADD = $(LDADD)
am_chan25_OBJECTS = chan25.$(OBJEXT)
chan25_OBJECTS = $(am_chan25_OBJECTS)
chan25_LDADD = $(LDADD)
am_chan3_OBJECTS = chan3.$(OBJEXT)
chan3_OBJECTS = $(am_chan3_OBJECTS)
chan3_LDADD = $(LDADD)
am_chan4_OBJECTS = chan4.$(OBJEXT)
chan4_OBJECTS = $(am_chan4_OBJECTS)
chan4_LDADD = $(LDADD)
am_chan5_OBJECTS = chan5.$(OBJEXT)
chan5_OBJECTS = $(am_chan5_OBJECTS)
chan5_LDADD = $(LDADD)
am_chan6_OBJECTS = chan6.$(OBJEXT)
chan6_OBJECTS = $(am_chan6_OBJECTS)
chan6_LDADD = $(LDADD)
am_chan7_OBJECTS = chan7.$(OBJEXT)
chan7_OBJECTS = $(am_chan7_OBJECTS)
chan7_LDADD = $(LDADD)
am_chan8_OBJECTS = chan8.$(OBJEXT)
chan8_OBJECTS = $(am_chan8_OBJECTS)
chan8_LDADD = $(LDADD)
am_chan9_OBJECTS = chan9.$(OBJEXT)
chan9_OBJECTS = $(am_chan9_OBJECTS)
chan9_LDADD = $(LDADD)
am_clock1_OBJECTS = clock1.$(OBJEXT)
clock1_OBJECTS = $(am_clock1_OBJECTS)
clock1_LDADD = $(LDADD)
am_clock10_OBJECTS = clock10.$(OBJEXT)
clock10_OBJECTS = $(am_clock10_OBJECTS)
clock10_LDADD = $(LDADD)
am_clock11_OBJECTS = clock11.$(OBJEXT)
clock11_OBJECTS = $(am_clock11_OBJECTS)
clock11_LDADD = $(LDADD)
am_clock12_OBJECTS = clock12.$(OBJEXT)
clock12_OBJECTS = $(am_clock12_OBJECTS)
clock12_LDADD = $(LDADD)
am_clock13_OBJECTS = clock13.$(OBJEXT)
clock13_OBJECTS = $(am_clock13_OBJECTS)
clock13_LDADD = $(LDADD)
am_clock14_OBJECTS = clock14.$(OBJEXT)
clock14_OBJECTS = $(am_clock14_OBJECTS)
clock14_LDADD = $(LDADD)
am_clock15_OBJECTS = clock15.$(OBJEXT)
clock15_OBJECTS = $(am_clock15_OBJECTS)
clock15_LDADD = $(LDADD)
am_clock2_OBJECTS = clock2.$(OBJEXT)
clock2_OBJECTS = $(am_clock2_OBJECTS)
clock2_LDADD = $(LDADD)
am_clock3_OBJECTS = clock3.$(OBJEXT)
clock3_OBJECTS = $(am_clock3_OBJECTS)
clock3_LDADD = $(LDADD)
am_clock4_OBJECTS = clock4.$(OBJEXT)
clock4_OBJECTS = $(am_clock4_OBJECTS)
clock4_LDADD = $(LDADD)
am_clock5_OBJECTS = clock5.$(OBJEXT)
clock5_OBJECTS = $(am_clock5_OBJECTS)
clock5_LDADD = $(LDADD)
am_clock6_OBJECTS = clock6.$(OBJEXT)
clock6_OBJECTS = $(am_clock6_OBJECTS)
clock6_LDADD = $(LDADD)
am_clock7_OBJECTS = clock7.$(OBJEXT)
clock7_OBJECTS = $(am_clock7_OBJECTS)
clock7_LDADD = $(LDADD)
am_clock8_OBJECTS = clock8.$(OBJEXT)
clock8_OBJECTS = $(am_clock8_OBJECTS)
clock8_LDADD = $(LDADD)
am_clock9_OBJECTS = clock9.$(OBJEXT)
clock9_OBJECTS = $(am_clock9_OBJECTS)
clock9_LDADD = $(LDADD)
am_connect1_OBJECTS = connect1.$(OBJEXT)
connect1_OBJECTS = $(am_connect1_OBJECTS)
connect1_LDADD = $(LDADD)
am_gc1_OBJECTS = gc1.$(OBJEXT)
gc1_OBJECTS = $(am_gc1_OBJECTS)
gc1_LDADD = $(LDADD)
am_mutex1_OBJECTS = mutex1.$(OBJEXT)
mutex1_OBJECTS = $(am_mutex1_OBJECTS)
mutex1_LDADD = $(LDADD)
am_par1_OBJECTS = par1.$(OBJEXT)
par1_OBJECTS = $(am_par1_OBJECTS)
par1_LDADD = $(LDADD)
am_par10_OBJECTS = par10.$(OBJEXT)
par10_OBJECTS = $(am_par10_OBJECTS)
par10_LDADD = $(LDADD)
am_par2_OBJECTS = par2.$(OBJEXT)
par2_OBJECTS = $(am_par2_OBJECTS)
par2_LDADD = $(LDADD)
am_par3_OBJECTS = par3.$(OBJEXT)
par3_OBJECTS = $(am_par3_OBJECTS)
par3_LDADD = $(LDADD)
am_par4_OBJECTS = par4.$(OBJEXT)
par4_OBJECTS = $(am_par4_OBJECTS)
par4_LDADD = $(LDADD)
am_par5_OBJECTS = par5.$(OBJEXT)
par5_OBJECTS = $(am_par5_OBJECTS)
par5_LDADD = $(LDADD)
am_par6_OBJECTS = par6.$(OBJEXT)
par6_OBJECTS = $(am_par6_OBJECTS)
par6_LDADD = $(LDADD)
am_par7_OBJECTS = par7.$(OBJEXT)
par7_OBJECTS = $(am_par7_OBJECTS)
par7_LDADD = $(LDADD)
am_par8_OBJECTS = par8.$(OBJEXT)
par8_OBJECTS = $(am_par8_OBJECTS)
par8_LDADD = $(LDADD)
am_par9_OBJECTS = par9.$(OBJEXT)
par9_OBJECTS = $(am_par9_OBJECTS)
par9_LDADD = $(LDADD)
am_pri1_OBJECTS = pri1.$(OBJEXT)
pri1_OBJECTS = $(am_pri1_OBJECTS)
pri1_LDADD = $(LDADD)
am_pri2_OBJECTS = pri2.$(OBJEXT)
pri2_OBJECTS = $(am_pri2_OBJECTS)
pri2_LDADD = $(LDADD)
am_pri3_OBJECTS = pri3.$(OBJEXT)
pri3_OBJECTS = $(am_pri3_OBJECTS)
pri3_LDADD = $(LDADD)
am_pri4_OBJECTS = pri4.$(OBJEXT)
pri4_OBJECTS = $(am_pri4_OBJECTS)
pri4_LDADD = $(LDADD)
am_pri5_OBJECTS = pri5.$(OBJEXT)
pri5_OBJECTS = $(am_pri5_OBJECTS)
pri5_LDADD = $(LDADD)
am_pri6_OBJECTS = pri6.$(OBJEXT)
pri6_OBJECTS = $(am_pri6_OBJECTS)
pri6_LDADD = $(LDADD)
am_pri7_OBJECTS = pri7.$(OBJEXT)
pri7_OBJECTS = $(am_pri7_OBJECTS)
pri7_LDADD = $(LDADD)
am_pri8_OBJECTS = pri8.$(OBJEXT)
pri8_OBJECTS = $(am_pri8_OBJECTS)
pri8_LDADD = $(LDADD)
am_proc1_OBJECTS = proc1.$(OBJEXT)
proc1_OBJECTS = $(am_proc1_OBJECTS)
am_proc10_OBJECTS = proc10.$(OBJEXT)
proc10_OBJECTS = $(am_proc10_OBJECTS)
proc10_LDADD = $(LDADD)
am_proc2_OBJECTS = proc2.$(OBJEXT)
proc2_OBJECTS = $(am_proc2_OBJECTS)
proc2_LDADD = $(LDADD)
am_proc3_OBJECTS = proc3.$(OBJEXT)
proc3_OBJECTS = $(am_proc3_OBJECTS)
proc3_LDADD = $(LDADD)
am_proc4_OBJECTS = proc4.$(OBJEXT)
proc4_OBJECTS = $(am_proc4_OBJECTS)
proc4_LDADD = $(LDADD)
am_proc5_OBJECTS = proc5.$(OBJEXT)
proc5_OBJECTS = $(am_proc5_OBJECTS)
proc5_LDADD = $(LDADD)
am_proc6_OBJECTS = proc6.$(OBJEXT)
proc6_OBJECTS = $(am_proc6_OBJECTS)
proc6_LDADD = $(LDADD)
am_proc7_OBJECTS = proc7.$(OBJEXT)
proc7_OBJECTS = $(am_proc7_OBJECTS)
proc7_LDADD = $(LDADD)
am_proc8_OBJECTS = proc8.$(OBJEXT)
proc8_OBJECTS = $(am_proc8_OBJECTS)
proc8_LDADD = $(LDADD)
am_proc9_OBJECTS = proc9.$(OBJEXT)
proc9_OBJECTS = $(am_proc9_OBJECTS)
proc9_LDADD = $(LDADD)
am_qsort1_OBJECTS = qsort1.$(OBJEXT)
qsort1_OBJECTS = $(am_qsort1_OBJECTS)
qsort1_LDADD = $(LDADD)
am_qsort2_OBJECTS = qsort2.$(OBJEXT)
qsort2_OBJECTS = $(am_qsort2_OBJECTS)
qsort2_LDADD = $(LDADD)
am_quantity1_OBJECTS = quantity1.$(OBJEXT)
quantity1_OBJECTS = $(am_quantity1_OBJECTS)
quantity1_LDADD = $(LDADD)
am_rand1_OBJECTS = rand1.$(OBJEXT)
rand1_OBJECTS = $(am_rand1_OBJECTS)
am_rand2_OBJECTS = rand2.$(OBJEXT)
rand2_OBJECTS = $(am_rand2_OBJECTS)
am_spawn1_OBJECTS = spawn1.$(OBJEXT)
spawn1_OBJECTS = $(am_spawn1_OBJECTS)
am_spawn2_OBJECTS = spawn2.$(OBJEXT)
spawn2_OBJECTS = $(am_spawn2_OBJECTS)
spawn2_LDADD = $(LDADD)
am_spawn3_OBJECTS = spawn3.$(OBJEXT)
spawn3_OBJECTS = $(am_spawn3_OBJECTS)
spawn3_LDADD = $(LDADD)
am_spawn4_OBJECTS = spawn4.$(OBJEXT)
spawn4_OBJECTS = $(am_spawn4_OBJECTS)
spawn4_LDADD = $(LDADD)
am_time1_OBJECTS = time1.$(OBJEXT)
time1_OBJECTS = $(am_time1_OBJECTS)
time1_LDADD = $(LDADD)
am_time2_OBJECTS = time2.$(OBJEXT)
time2_OBJECTS = $(am_time2_OBJECTS)
time2_LDADD = $(LDADD)
am_time3_OBJECTS = time3.$(OBJEXT)
time3_OBJECTS = $(am_time3_OBJECTS)
time3_LDADD = $(LDADD)
am_time4_OBJECTS = time4.$(OBJEXT)
time4_OBJECTS = $(am_time4_OBJECTS)
time4_LDADD = $(LDADD)
am_time5_OBJECTS = time5.$(OBJEXT)
time5_OBJECTS = $(am_time5_OBJECTS)
time5_LDADD = $(LDADD)
DEFAULT_INCLUDES = -I.@am__isrc@
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_$(V))
am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))
am__v_CXX_0 = @echo "  CXX   " $@;
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
AM_V_CXXLD = $(am__v_CXXLD_$(V))
am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))
am__v_CXXLD_0 = @echo "  CXXLD " $@;
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN   " $@;
SOURCES = $(chan1_SOURCES) $(chan10_SOURCES) $(chan11_SOURCES) \
	$(chan12_SOURCES) $(chan13_SOURCES) $(chan14_SOURCES) \
	$(chan15_SOURCES) $(chan16_SOURCES) $(chan17_SOURCES) \
	$(chan18_SOURCES) $(chan19_SOURCES) $(chan2_SOURCES) \
	$(chan20_SOURCES) $(chan21_SOURCES) $(chan22_SOURCES) \
	$(chan23_SOURCES) $(chan24_SOURCES) $(chan25_SOURCES) \
	$(chan3_SOURCES) $(chan4_SOURCES) $(chan5_SOURCES) \
	$(chan6_SOURCES) $(chan7_SOURCES) $(chan8_SOURCES) \
	$(chan9_SOURCES) $(clock1_SOURCES) $(clock10_SOURCES) \
	$(clock11_SOURCES) $(clock12_SOURCES) $(clock13_SOURCES) \
	$(clock14_SOURCES) $(clock15_SOURCES) $(clock2_SOURCES) \
	$(clock3_SOURCES) $(clock4_SOURCES) $(clock5_SOURCES) \
	$(clock6_SOURCES) $(clock7_SOURCES) $(clock8_SOURCES) \
	$(clock9_SOURCES) $(connect1_SOURCES) $(gc1_SOURCES) \
	$(mutex1_SOURCES) $(par1_SOURCES) $(par10_SOURCES) \
	$(par2_SOURCES) $(par3_SOURCES) $(par4_SOURCES) \
	$(par5_SOURCES) $(par6_SOURCES) $(par7_SOURCES) \
	$(par8_SOURCES) $(par9_SOURCES) $(pri1_SOURCES) \
	$(pri2_SOURCES) $(pri3_SOURCES) $(pri4_SOURCES) \
	$(pri5_SOURCES) $(pri6_SOURCES) $(pri7_SOURCES) \
	$(pri8_SOURCES) $(proc1_SOURCES) $(proc10_SOURCES) \
	$(proc2_SOURCES) $(proc3_SOURCES) $(proc4_SOURCES) \
	$(proc5_SOURCES) $(proc6_SOURCES) $(proc7_SOURCES) \
	$(proc8_SOURCES) $(proc9_SOURCES) $(qsort1_SOURCES) \
	$(qsort2_SOURCES) $(quantity1_SOURCES) $(rand1_SOURCES) \
	$(rand2_SOURCES) $(spawn1_SOURCES) $(spawn2_SOURCES) \
	$(spawn3_SOURCES) $(spawn4_SOURCES) $(time1_SOURCES) \
	$(time2_SOURCES) $(time3_SOURCES) $(time4_SOURCES) \
	$(time5_SOURCES)
DIST_SOURCES = $(chan1_SOURCES) $(chan10_SOURCES) $(chan11_SOURCES) \
	$(chan12_SOURCES) $(chan13_SOURCES) $(chan14_SOURCES) \
	$(chan15_SOURCES) $(chan16_SOURCES) $(chan17_SOURCES) \
	$(chan18_SOURCES) $(chan19_SOURCES) $(chan2_SOURCES) \
	$(chan20_SOURCES) $(chan21_SOURCES) $(chan22_SOURCES) \
	$(chan23_SOURCES) $(chan24_SOURCES) $(chan25_SOURCES) \
	$(chan3_SOURCES) $(chan4_SOURCES) $(chan5_SOURCES) \
	$(chan6_SOURCES) $(chan7_SOURCES) $(chan8_SOURCES) \
	$(chan9_SOURCES) $(clock1_SOURCES) $(clock10_SOURCES) \
	$(clock11_SOURCES) $(clock12_SOURCES) $(clock13_SOURCES) \
	$(clock14_SOURCES) $(clock15_SOURCES) $(clock2_SOURCES) \
	$(clock3_SOURCES) $(clock4_SOURCES) $(clock5_SOURCES) \
	$(clock6_SOURCES) $(clock7_SOURCES) $(clock8_SOURCES) \
	$(clock9_SOURCES) $(connect1_SOURCES) $(gc1_SOURCES) \
	$(mutex1_SOURCES) $(par1_SOURCES) $(par10_SOURCES) \
	$(par2_SOURCES) $(par3_SOURCES) $(par4_SOURCES) \
	$(par5_SOURCES) $(par6_SOURCES) $(par7_SOURCES) \
	$(par8_SOURCES) $(par9_SOURCES) $(pri1_SOURCES) \
	$(pri2_SOURCES) $(pri3_SOURCES) $(pri4_SOURCES) \
	$(pri5_SOURCES) $(pri6_SOURCES) $(pri7_SOURCES) \
	$(pri8_SOURCES) $(proc1_SOURCES) $(proc10_SOURCES) \
	$(proc2_SOURCES) $(proc3_SOURCES) $(proc4_SOURCES) \
	$(proc5_SOURCES) $(proc6_SOURCES) $(proc7_SOURCES) \
	$(proc8_SOURCES) $(proc9_SOURCES) $(qsort1_SOURCES) \
	$(qsort2_SOURCES) $(quantity1_SOURCES) $(rand1_SOURCES) \
	$(rand2_SOURCES) $(spawn1_SOURCES) $(spawn2_SOURCES) \
	$(spawn3_SOURCES) $(spawn4_SOURCES) $(time1_SOURCES) \
	$(time2_SOURCES) $(time3_SOURCES) $(time4_SOURCES) \
	$(time5_SOURCES)
ETAGS = etags
CTAGS = ctags
am__tty_colors = \
red=; grn=; lgn=; blu=; std=
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
ACLOCAL_FLAGS = @ACLOCAL_FLAGS@
AMTAR = @AMTAR@
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
AR = @AR@
ARGZ_H = @ARGZ_H@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
BIBTEX = @BIBTEX@
CC = @CC@
CCAS = @CCAS@
CCASDEPMODE = @CCASDEPMODE@
CCASFLAGS = @CCASFLAGS@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
COMPILE_OK = @COMPILE_OK@
CONFOPTS = @CONFOPTS@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CXXPROG = @CXXPROG@
CYGPATH_W = @CYGPATH_W@
CompassDistDir = @CompassDistDir@
CompassExists = @CompassExists@
CompassParam1 = @CompassParam1@
CompassPlasmaDir = @CompassPlasmaDir@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DISTURL = @DISTURL@
DLLTOOL = @DLLTOOL@
DSYMUTIL = @DSYMUTIL@
DUMPBIN = @DUMPBIN@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EFENCE = @EFENCE@
EGREP = @EGREP@
EXEEXT = @EXEEXT@
EXTRA_LDFLAGS = @EXTRA_LDFLAGS@
FGREP = @FGREP@
GCC_MAJOR = @GCC_MAJOR@
GCC_MINOR = @GCC_MINOR@
GCC_VERSION = @GCC_VERSION@
GREP = @GREP@
INCLTDL = @INCLTDL@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
InfoHome = @InfoHome@
LD = @LD@
LDFLAGS = @LDFLAGS@
LEX = @LEX@
LEXLIB = @LEXLIB@
LEX_CFLAGS = @LEX_CFLAGS@
LEX_OUTPUT_ROOT = @LEX_OUTPUT_ROOT@
LIBADD_DL = @LIBADD_DL@
LIBADD_DLD_LINK = @LIBADD_DLD_LINK@
LIBADD_DLOPEN = @LIBADD_DLOPEN@
LIBADD_SHL_LOAD = @LIBADD_SHL_LOAD@
LIBLTDL = @LIBLTDL@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LIBTOOL = @LIBTOOL@
LIPO = @LIPO@
LN_S = @LN_S@
LTDLDEPS = @LTDLDEPS@
LTDLINCL = @LTDLINCL@
LTDLOPEN = @LTDLOPEN@
LTLIBOBJS = @LTLIBOBJS@
LT_CONFIG_H = @LT_CONFIG_H@
LT_DLLOADERS = @LT_DLLOADERS@
LT_DLPREOPEN = @LT_DLPREOPEN@
MAINT = @MAINT@
MAKEINFO = @MAKEINFO@
MANIFEST_TOOL = @MANIFEST_TOOL@
MINI_CC_FLAGS = @MINI_CC_FLAGS@
MKDIR_P = @MKDIR_P@
NM = @NM@
NMEDIT = @NMEDIT@
OBJDUMP = @OBJDUMP@
OBJEXT = @OBJEXT@
OTOOL = @OTOOL@
OTOOL64 = @OTOOL64@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PDFLATEX = @PDFLATEX@
PERLPROG = @PERLPROG@
PROFILE = @PROFILE@
RANLIB = @RANLIB@
READLINK = @READLINK@
RFLAG = @RFLAG@
SED = @SED@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
SKRIBE = @SKRIBE@
STRIP = @STRIP@
SYS_LIBS = @SYS_LIBS@
TRIP = @TRIP@
VERSION = @VERSION@
W2L = @W2L@
WEBURL = @WEBURL@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_AR = @ac_ct_AR@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
ltdl_LIBOBJS = @ltdl_LIBOBJS@
ltdl_LTLIBOBJS = @ltdl_LTLIBOBJS@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
subdirs = @subdirs@
sys_symbol_underscore = @sys_symbol_underscore@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
TESTS = regress
EXTRA_DIST = regress
par1_SOURCES = par1.pa
par1_DEPENDENCIES = $(DEPENDENCIES)
par2_SOURCES = par2.pa
par2_DEPENDENCIES = $(DEPENDENCIES)
par3_SOURCES = par3.pa
par3_DEPENDENCIES = $(DEPENDENCIES)
par4_SOURCES = par4.pa
par4_DEPENDENCIES = $(DEPENDENCIES)
par5_SOURCES = par5.pa
par5_DEPENDENCIES = $(DEPENDENCIES)
par6_SOURCES = par6.pa
par6_DEPENDENCIES = $(DEPENDENCIES)
par7_SOURCES = par7.pa
par7_DEPENDENCIES = $(DEPENDENCIES)
par8_SOURCES = par8.pa
par8_DEPENDENCIES = $(DEPENDENCIES)
par9_SOURCES = par9.pa
par9_DEPENDENCIES = $(DEPENDENCIES)
par10_SOURCES = par10.pa
par10_DEPENDENCIES = $(DEPENDENCIES)
qsort1_SOURCES = qsort1.pa
qsort1_DEPENDENCIES = $(DEPENDENCIES)
qsort2_SOURCES = qsort2.pa
qsort2_DEPENDENCIES = $(DEPENDENCIES)
chan1_SOURCES = chan1.C
chan1_DEPENDENCIES = $(DEPENDENCIES)
chan1_LDADD = $(CXX_LDADD)
chan2_SOURCES = chan2.pa
chan2_DEPENDENCIES = $(DEPENDENCIES)
chan3_SOURCES = chan3.pa
chan3_DEPENDENCIES = $(DEPENDENCIES)
chan4_SOURCES = chan4.pa
chan4_DEPENDENCIES = $(DEPENDENCIES)
chan5_SOURCES = chan5.pa
chan5_DEPENDENCIES = $(DEPENDENCIES)
chan6_SOURCES = chan6.pa
chan6_DEPENDENCIES = $(DEPENDENCIES)
chan7_SOURCES = chan7.pa
chan7_DEPENDENCIES = $(DEPENDENCIES)
chan8_SOURCES = chan8.pa
chan8_DEPENDENCIES = $(DEPENDENCIES)
chan9_SOURCES = chan9.pa
chan9_DEPENDENCIES = $(DEPENDENCIES)
chan10_SOURCES = chan10.pa
chan10_DEPENDENCIES = $(DEPENDENCIES)
chan11_SOURCES = chan11.pa
chan11_DEPENDENCIES = $(DEPENDENCIES)
chan12_SOURCES = chan12.pa
chan12_DEPENDENCIES = $(DEPENDENCIES)
chan13_SOURCES = chan13.pa
chan13_DEPENDENCIES = $(DEPENDENCIES)
chan14_SOURCES = chan14.pa
chan14_DEPENDENCIES = $(DEPENDENCIES)
chan15_SOURCES = chan15.pa
chan15_DEPENDENCIES = $(DEPENDENCIES)
chan16_SOURCES = chan16.pa
chan16_DEPENDENCIES = $(DEPENDENCIES)
chan17_SOURCES = chan17.pa
chan17_DEPENDENCIES = $(DEPENDENCIES)
chan18_SOURCES = chan18.pa
chan18_DEPENDENCIES = $(DEPENDENCIES)
chan19_SOURCES = chan19.pa
chan19_DEPENDENCIES = $(DEPENDENCIES)
chan20_SOURCES = chan20.pa
chan20_DEPENDENCIES = $(DEPENDENCIES)
chan21_SOURCES = chan21.pa
chan21_DEPENDENCIES = $(DEPENDENCIES)
chan22_SOURCES = chan22.pa
chan22_DEPENDENCIES = $(DEPENDENCIES)
chan23_SOURCES = chan23.pa
chan23_DEPENDENCIES = $(DEPENDENCIES)
chan24_SOURCES = chan24.pa
chan24_DEPENDENCIES = $(DEPENDENCIES)
chan25_SOURCES = chan25.pa
chan25_DEPENDENCIES = $(DEPENDENCIES)
spawn1_SOURCES = spawn1.C
spawn1_DEPENDENCIES = $(DEPENDENCIES)
spawn1_LDADD = $(CXX_LDADD)
spawn2_SOURCES = spawn2.pa
spawn2_DEPENDENCIES = $(DEPENDENCIES)
spawn3_SOURCES = spawn3.pa
spawn3_DEPENDENCIES = $(DEPENDENCIES)
spawn4_SOURCES = spawn4.pa
spawn4_DEPENDENCIES = $(DEPENDENCIES)
mutex1_SOURCES = mutex1.pa
mutex1_DEPENDENCIES = $(DEPENDENCIES)
pri1_SOURCES = pri1.pa
pri1_DEPENDENCIES = $(DEPENDENCIES)
pri2_SOURCES = pri2.pa
pri2_DEPENDENCIES = $(DEPENDENCIES)
pri3_SOURCES = pri3.pa
pri3_DEPENDENCIES = $(DEPENDENCIES)
pri4_SOURCES = pri4.pa
pri4_DEPENDENCIES = $(DEPENDENCIES)
pri5_SOURCES = pri5.pa
pri5_DEPENDENCIES = $(DEPENDENCIES)
pri6_SOURCES = pri6.pa
pri6_DEPENDENCIES = $(DEPENDENCIES)
pri7_SOURCES = pri7.pa
pri7_DEPENDENCIES = $(DEPENDENCIES)
pri8_SOURCES = pri8.pa
pri8_DEPENDENCIES = $(DEPENDENCIES)
proc1_SOURCES = proc1.C
proc1_DEPENDENCIES = $(DEPENDENCIES)
proc1_LDADD = $(CXX_LDADD)
proc2_SOURCES = proc2.pa
proc2_DEPENDENCIES = $(DEPENDENCIES)
proc3_SOURCES = proc3.pa
proc3_DEPENDENCIES = $(DEPENDENCIES)
proc4_SOURCES = proc4.pa
proc4_DEPENDENCIES = $(DEPENDENCIES)
proc5_SOURCES = proc5.pa
proc5_DEPENDENCIES = $(DEPENDENCIES)
proc6_SOURCES = proc6.pa
proc6_DEPENDENCIES = $(DEPENDENCIES)
proc7_SOURCES = proc7.pa
proc7_DEPENDENCIES = $(DEPENDENCIES)
proc8_SOURCES = proc8.pa
proc8_DEPENDENCIES = $(DEPENDENCIES)
proc9_SOURCES = proc9.pa
proc9_DEPENDENCIES = $(DEPENDENCIES)
proc10_SOURCES = proc10.pa
proc10_DEPENDENCIES = $(DEPENDENCIES)
time1_SOURCES = time1.pa
time1_DEPENDENCIES = $(DEPENDENCIES)
time2_SOURCES = time2.pa
time2_DEPENDENCIES = $(DEPENDENCIES)
time3_SOURCES = time3.pa
time3_DEPENDENCIES = $(DEPENDENCIES)
time4_SOURCES = time4.pa
time4_DEPENDENCIES = $(DEPENDENCIES)
time5_SOURCES = time5.pa
time5_DEPENDENCIES = $(DEPENDENCIES)
rand1_SOURCES = rand1.C
rand1_DEPENDENCIES = $(DEPENDENCIES)
rand1_LDADD = $(CXX_LDADD)
rand2_SOURCES = rand2.C
rand2_DEPENDENCIES = $(DEPENDENCIES)
rand2_LDADD = $(CXX_LDADD)
clock1_SOURCES = clock1.pa
clock1_DEPENDENCIES = $(DEPENDENCIES)
clock2_SOURCES = clock2.pa
clock2_DEPENDENCIES = $(DEPENDENCIES)
clock3_SOURCES = clock3.pa
clock3_DEPENDENCIES = $(DEPENDENCIES)
clock4_SOURCES = clock4.pa
clock4_DEPENDENCIES = $(DEPENDENCIES)
clock5_SOURCES = clock5.pa
clock5_DEPENDENCIES = $(DEPENDENCIES)
clock6_SOURCES = clock6.pa
clock6_DEPENDENCIES = $(DEPENDENCIES)
clock7_SOURCES = clock7.pa
clock7_DEPENDENCIES = $(DEPENDENCIES)
clock8_SOURCES = clock8.pa
clock8_DEPENDENCIES = $(DEPENDENCIES)
clock9_SOURCES = clock9.pa
clock9_DEPENDENCIES = $(DEPENDENCIES)
clock10_SOURCES = clock10.pa
clock10_DEPENDENCIES = $(DEPENDENCIES)
clock11_SOURCES = clock11.pa
clock11_DEPENDENCIES = $(DEPENDENCIES)
clock12_SOURCES = clock12.pa
clock12_DEPENDENCIES = $(DEPENDENCIES)
clock13_SOURCES = clock13.pa
clock13_DEPENDENCIES = $(DEPENDENCIES)
clock14_SOURCES = clock14.pa
clock14_DEPENDENCIES = $(DEPENDENCIES)
clock15_SOURCES = clock15.pa
clock15_DEPENDENCIES = $(DEPENDENCIES)
quantity1_SOURCES = quantity1.pa
quantity1_DEPENDENCIES = $(DEPENDENCIES)
connect1_SOURCES = connect1.pa
connect1_DEPENDENCIES = $(DEPENDENCIES)
gc1_SOURCES = gc1.pa
gc1_DEPENDENCIES = $(DEPENDENCIES)
AM_CXXFLAGS = $(CXXFLAGS) -I$(top_srcdir) -I$(top_srcdir)/src -I$(top_srcdir)/gc
CLEANFILES = *.ii
PLASMA = $(top_builddir)/scripts/plasma --devel-src=$(top_srcdir) --devel-build=$(top_builddir)
AM_LDFLAGS = $(EXTRA_LDFLAGS) -L$(top_builddir)/src/.libs -Wl,-R$(top_builddir)/src/.libs \
	-L$(top_builddir)/qt/.libs -Wl,-R$(top_builddir)/qt/.libs \
	-L$(top_builddir)/gc/.libs -Wl,-R$(top_builddir)/gc/.libs

# This must be added to each C++ file's LDADD variable.
CXX_LDADD = -lplasma -lqt -lgc $(SYS_LIBS)
CXXLD = $(CXX)
LINK = $(PLASMA) -o $@
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
DEPENDENCIES = $(top_builddir)/src/.libs/libplasma.a
all: all-am

.SUFFIXES:
.SUFFIXES: .C .lo .o .obj .pa
$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am $(top_srcdir)/tests/Makefile.rules $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign tests/basic/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign tests/basic/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: @MAINTAINER_MODE_TRUE@ $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): @MAINTAINER_MODE_TRUE@ $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

clean-checkPROGRAMS:
	@list='$(check_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list
chan1$(EXEEXT): $(chan1_OBJECTS) $(chan1_DEPENDENCIES) 
	@rm -f chan1$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(chan1_OBJECTS) $(chan1_LDADD) $(LIBS)
chan10$(EXEEXT): $(chan10_OBJECTS) $(chan10_DEPENDENCIES) 
	@rm -f chan10$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(chan10_OBJECTS) $(chan10_LDADD) $(LIBS)
chan11$(EXEEXT): $(chan11_OBJECTS) $(chan11_DEPENDENCIES) 
	@rm -f chan11$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(chan11_OBJECTS) $(chan11_LDADD) $(LIBS)
chan12$(EXEEXT): $(chan12_OBJECTS) $(chan12_DEPENDENCIES) 
	@rm -f chan12$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(chan12_OBJECTS) $(chan12_LDADD) $(LIBS)
chan13$(EXEEXT): $(chan13_OBJECTS) $(chan13_DEPENDENCIES) 
	@rm -f chan13$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(chan13_OBJECTS) $(chan13_LDADD) $(LIBS)
chan14$(EXEEXT): $(chan14_OBJECTS) $(chan14_DEPENDENCIES) 
	@rm -f chan14$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(chan14_OBJECTS) $(chan14_LDADD) $(LIBS)
chan15$(EXEEXT): $(chan15_OBJECTS) $(chan15_DEPENDENCIES) 
	@rm -f chan15$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(chan15_OBJECTS) $(chan15_LDADD) $(LIBS)
chan16$(EXEEXT): $(chan16_OBJECTS) $(chan16_DEPENDENCIES) 
	@rm -f chan16$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(chan16_OBJECTS) $(chan16_LDADD) $(LIBS)
chan17$(EXEEXT): $(chan17_OBJECTS) $(chan17_DEPENDENCIES) 
	@rm -f chan17$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(chan17_OBJECTS) $(chan17_LDADD) $(LIBS)
chan18$(EXEEXT): $(chan18_OBJECTS) $(chan18_DEPENDENCIES) 
	@rm -f chan18$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(chan18_OBJECTS) $(chan18_LDADD) $(LIBS)
chan19$(EXEEXT): $(chan19_OBJECTS) $(chan19_DEPENDENCIES) 
	@rm -f chan19$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(chan19_OBJECTS) $(chan19_LDADD) $(LIBS)
chan2$(EXEEXT): $(chan2_OBJECTS) $(chan2_DEPENDENCIES) 
	@rm -f chan2$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(chan2_OBJECTS) $(chan2_LDADD) $(LIBS)
chan20$(EXEEXT): $(chan20_OBJECTS) $(chan20_DEPENDENCIES) 
	@rm -f chan20$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(chan20_OBJECTS) $(chan20_LDADD) $(LIBS)
chan21$(EXEEXT): $(chan21_OBJECTS) $(chan21_DEPENDENCIES) 
	@rm -f chan21$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(chan21_OBJECTS) $(chan21_LDADD) $(LIBS)
chan22$(EXEEXT): $(chan22_OBJECTS) $(chan22_DEPENDENCIES) 
	@rm -f chan22$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(chan22_OBJECTS) $(chan22_LDADD) $(LIBS)
chan23$(EXEEXT): $(chan23_OBJECTS) $(chan23_DEPENDENCIES) 
	@rm -f chan23$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(chan23_OBJECTS) $(chan23_LDADD) $(LIBS)
chan24$(EXEEXT): $(chan24_OBJECTS) $(chan24_DEPENDENCIES) 
	@rm -f chan24$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(chan24_OBJECTS) $(chan24_LDADD) $(LIBS)
chan25$(EXEEXT): $(chan25_OBJECTS) $(chan25_DEPENDENCIES) 
	@rm -f chan25$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(chan25_OBJECTS) $(chan25_LDADD) $(LIBS)
chan3$(EXEEXT): $(chan3_OBJECTS) $(chan3_DEPENDENCIES) 
	@rm -f chan3$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(chan3_OBJECTS) $(chan3_LDADD) $(LIBS)
chan4$(EXEEXT): $(chan4_OBJECTS) $(chan4_DEPENDENCIES) 
	@rm -f chan4$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(chan4_OBJECTS) $(chan4_LDADD) $(LIBS)
chan5$(EXEEXT): $(chan5_OBJECTS) $(chan5_DEPENDENCIES) 
	@rm -f chan5$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(chan5_OBJECTS) $(chan5_LDADD) $(LIBS)
chan6$(EXEEXT): $(chan6_OBJECTS) $(chan6_DEPENDENCIES) 
	@rm -f chan6$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(chan6_OBJECTS) $(chan6_LDADD) $(LIBS)
chan7$(EXEEXT): $(chan7_OBJECTS) $(chan7_DEPENDENCIES) 
	@rm -f chan7$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(chan7_OBJECTS) $(chan7_LDADD) $(LIBS)
chan8$(EXEEXT): $(chan8_OBJECTS) $(chan8_DEPENDENCIES) 
	@rm -f chan8$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(chan8_OBJECTS) $(chan8_LDADD) $(LIBS)
chan9$(EXEEXT): $(chan9_OBJECTS) $(chan9_DEPENDENCIES) 
	@rm -f chan9$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(chan9_OBJECTS) $(chan9_LDADD) $(LIBS)
clock1$(EXEEXT): $(clock1_OBJECTS) $(clock1_DEPENDENCIES) 
	@rm -f clock1$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(clock1_OBJECTS) $(clock1_LDADD) $(LIBS)
clock10$(EXEEXT): $(clock10_OBJECTS) $(clock10_DEPENDENCIES) 
	@rm -f clock10$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(clock10_OBJECTS) $(clock10_LDADD) $(LIBS)
clock11$(EXEEXT): $(clock11_OBJECTS) $(clock11_DEPENDENCIES) 
	@rm -f clock11$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(clock11_OBJECTS) $(clock11_LDADD) $(LIBS)
clock12$(EXEEXT): $(clock12_OBJECTS) $(clock12_DEPENDENCIES) 
	@rm -f clock12$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(clock12_OBJECTS) $(clock12_LDADD) $(LIBS)
clock13$(EXEEXT): $(clock13_OBJECTS) $(clock13_DEPENDENCIES) 
	@rm -f clock13$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(clock13_OBJECTS) $(clock13_LDADD) $(LIBS)
clock14$(EXEEXT): $(clock14_OBJECTS) $(clock14_DEPENDENCIES) 
	@rm -f clock14$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(clock14_OBJECTS) $(clock14_LDADD) $(LIBS)
clock15$(EXEEXT): $(clock15_OBJECTS) $(clock15_DEPENDENCIES) 
	@rm -f clock15$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(clock15_OBJECTS) $(clock15_LDADD) $(LIBS)
clock2$(EXEEXT): $(clock2_OBJECTS) $(clock2_DEPENDENCIES) 
	@rm -f clock2$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(clock2_OBJECTS) $(clock2_LDADD) $(LIBS)
clock3$(EXEEXT): $(clock3_OBJECTS) $(clock3_DEPENDENCIES) 
	@rm -f clock3$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(clock3_OBJECTS) $(clock3_LDADD) $(LIBS)
clock4$(EXEEXT): $(clock4_OBJECTS) $(clock4_DEPENDENCIES) 
	@rm -f clock4$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(clock4_OBJECTS) $(clock4_LDADD) $(LIBS)
clock5$(EXEEXT): $(clock5_OBJECTS) $(clock5_DEPENDENCIES) 
	@rm -f clock5$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(clock5_OBJECTS) $(clock5_LDADD) $(LIBS)
clock6$(EXEEXT): $(clock6_OBJECTS) $(clock6_DEPENDENCIES) 
	@rm -f clock6$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(clock6_OBJECTS) $(clock6_LDADD) $(LIBS)
clock7$(EXEEXT): $(clock7_OBJECTS) $(clock7_DEPENDENCIES) 
	@rm -f clock7$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(clock7_OBJECTS) $(clock7_LDADD) $(LIBS)
clock8$(EXEEXT): $(clock8_OBJECTS) $(clock8_DEPENDENCIES) 
	@rm -f clock8$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(clock8_OBJECTS) $(clock8_LDADD) $(LIBS)
clock9$(EXEEXT): $(clock9_OBJECTS) $(clock9_DEPENDENCIES) 
	@rm -f clock9$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(clock9_OBJECTS) $(clock9_LDADD) $(LIBS)
connect1$(EXEEXT): $(connect1_OBJECTS) $(connect1_DEPENDENCIES) 
	@rm -f connect1$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(connect1_OBJECTS) $(connect1_LDADD) $(LIBS)
gc1$(EXEEXT): $(gc1_OBJECTS) $(gc1_DEPENDENCIES) 
	@rm -f gc1$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(gc1_OBJECTS) $(gc1_LDADD) $(LIBS)
mutex1$(EXEEXT): $(mutex1_OBJECTS) $(mutex1_DEPENDENCIES) 
	@rm -f mutex1$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(mutex1_OBJECTS) $(mutex1_LDADD) $(LIBS)
par1$(EXEEXT): $(par1_OBJECTS) $(par1_DEPENDENCIES) 
	@rm -f par1$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(par1_OBJECTS) $(par1_LDADD) $(LIBS)
par10$(EXEEXT): $(par10_OBJECTS) $(par10_DEPENDENCIES) 
	@rm -f par10$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(par10_OBJECTS) $(par10_LDADD) $(LIBS)
par2$(EXEEXT): $(par2_OBJECTS) $(par2_DEPENDENCIES) 
	@rm -f par2$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(par2_OBJECTS) $(par2_LDADD) $(LIBS)
par3$(EXEEXT): $(par3_OBJECTS) $(par3_DEPENDENCIES) 
	@rm -f par3$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(par3_OBJECTS) $(par3_LDADD) $(LIBS)
par4$(EXEEXT): $(par4_OBJECTS) $(par4_DEPENDENCIES) 
	@rm -f par4$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(par4_OBJECTS) $(par4_LDADD) $(LIBS)
par5$(EXEEXT): $(par5_OBJECTS) $(par5_DEPENDENCIES) 
	@rm -f par5$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(par5_OBJECTS) $(par5_LDADD) $(LIBS)
par6$(EXEEXT): $(par6_OBJECTS) $(par6_DEPENDENCIES) 
	@rm -f par6$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(par6_OBJECTS) $(par6_LDADD) $(LIBS)
par7$(EXEEXT): $(par7_OBJECTS) $(par7_DEPENDENCIES) 
	@rm -f par7$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(par7_OBJECTS) $(par7_LDADD) $(LIBS)
par8$(EXEEXT): $(par8_OBJECTS) $(par8_DEPENDENCIES) 
	@rm -f par8$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(par8_OBJECTS) $(par8_LDADD) $(LIBS)
par9$(EXEEXT): $(par9_OBJECTS) $(par9_DEPENDENCIES) 
	@rm -f par9$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(par9_OBJECTS) $(par9_LDADD) $(LIBS)
pri1$(EXEEXT): $(pri1_OBJECTS) $(pri1_DEPENDENCIES) 
	@rm -f pri1$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(pri1_OBJECTS) $(pri1_LDADD) $(LIBS)
pri2$(EXEEXT): $(pri2_OBJECTS) $(pri2_DEPENDENCIES) 
	@rm -f pri2$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(pri2_OBJECTS) $(pri2_LDADD) $(LIBS)
pri3$(EXEEXT): $(pri3_OBJECTS) $(pri3_DEPENDENCIES) 
	@rm -f pri3$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(pri3_OBJECTS) $(pri3_LDADD) $(LIBS)
pri4$(EXEEXT): $(pri4_OBJECTS) $(pri4_DEPENDENCIES) 
	@rm -f pri4$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(pri4_OBJECTS) $(pri4_LDADD) $(LIBS)
pri5$(EXEEXT): $(pri5_OBJECTS) $(pri5_DEPENDENCIES) 
	@rm -f pri5$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(pri5_OBJECTS) $(pri5_LDADD) $(LIBS)
pri6$(EXEEXT): $(pri6_OBJECTS) $(pri6_DEPENDENCIES) 
	@rm -f pri6$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(pri6_OBJECTS) $(pri6_LDADD) $(LIBS)
pri7$(EXEEXT): $(pri7_OBJECTS) $(pri7_DEPENDENCIES) 
	@rm -f pri7$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(pri7_OBJECTS) $(pri7_LDADD) $(LIBS)
pri8$(EXEEXT): $(pri8_OBJECTS) $(pri8_DEPENDENCIES) 
	@rm -f pri8$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(pri8_OBJECTS) $(pri8_LDADD) $(LIBS)
proc1$(EXEEXT): $(proc1_OBJECTS) $(proc1_DEPENDENCIES) 
	@rm -f proc1$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(proc1_OBJECTS) $(proc1_LDADD) $(LIBS)
proc10$(EXEEXT): $(proc10_OBJECTS) $(proc10_DEPENDENCIES) 
	@rm -f proc10$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(proc10_OBJECTS) $(proc10_LDADD) $(LIBS)
proc2$(EXEEXT): $(proc2_OBJECTS) $(proc2_DEPENDENCIES) 
	@rm -f proc2$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(proc2_OBJECTS) $(proc2_LDADD) $(LIBS)
proc3$(EXEEXT): $(proc3_OBJECTS) $(proc3_DEPENDENCIES) 
	@rm -f proc3$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(proc3_OBJECTS) $(proc3_LDADD) $(LIBS)
proc4$(EXEEXT): $(proc4_OBJECTS) $(proc4_DEPENDENCIES) 
	@rm -f proc4$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(proc4_OBJECTS) $(proc4_LDADD) $(LIBS)
proc5$(EXEEXT): $(proc5_OBJECTS) $(proc5_DEPENDENCIES) 
	@rm -f proc5$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(proc5_OBJECTS) $(proc5_LDADD) $(LIBS)
proc6$(EXEEXT): $(proc6_OBJECTS) $(proc6_DEPENDENCIES) 
	@rm -f proc6$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(proc6_OBJECTS) $(proc6_LDADD) $(LIBS)
proc7$(EXEEXT): $(proc7_OBJECTS) $(proc7_DEPENDENCIES) 
	@rm -f proc7$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(proc7_OBJECTS) $(proc7_LDADD) $(LIBS)
proc8$(EXEEXT): $(proc8_OBJECTS) $(proc8_DEPENDENCIES) 
	@rm -f proc8$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(proc8_OBJECTS) $(proc8_LDADD) $(LIBS)
proc9$(EXEEXT): $(proc9_OBJECTS) $(proc9_DEPENDENCIES) 
	@rm -f proc9$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(proc9_OBJECTS) $(proc9_LDADD) $(LIBS)
qsort1$(EXEEXT): $(qsort1_OBJECTS) $(qsort1_DEPENDENCIES) 
	@rm -f qsort1$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(qsort1_OBJECTS) $(qsort1_LDADD) $(LIBS)
qsort2$(EXEEXT): $(qsort2_OBJECTS) $(qsort2_DEPENDENCIES) 
	@rm -f qsort2$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(qsort2_OBJECTS) $(qsort2_LDADD) $(LIBS)
quantity1$(EXEEXT): $(quantity1_OBJECTS) $(quantity1_DEPENDENCIES) 
	@rm -f quantity1$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(quantity1_OBJECTS) $(quantity1_LDADD) $(LIBS)
rand1$(EXEEXT): $(rand1_OBJECTS) $(rand1_DEPENDENCIES) 
	@rm -f rand1$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(rand1_OBJECTS) $(rand1_LDADD) $(LIBS)
rand2$(EXEEXT): $(rand2_OBJECTS) $(rand2_DEPENDENCIES) 
	@rm -f rand2$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(rand2_OBJECTS) $(rand2_LDADD) $(LIBS)
spawn1$(EXEEXT): $(spawn1_OBJECTS) $(spawn1_DEPENDENCIES) 
	@rm -f spawn1$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(spawn1_OBJECTS) $(spawn1_LDADD) $(LIBS)
spawn2$(EXEEXT): $(spawn2_OBJECTS) $(spawn2_DEPENDENCIES) 
	@rm -f spawn2$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(spawn2_OBJECTS) $(spawn2_LDADD) $(LIBS)
spawn3$(EXEEXT): $(spawn3_OBJECTS) $(spawn3_DEPENDENCIES) 
	@rm -f spawn3$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(spawn3_OBJECTS) $(spawn3_LDADD) $(LIBS)
spawn4$(EXEEXT): $(spawn4_OBJECTS) $(spawn4_DEPENDENCIES) 
	@rm -f spawn4$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(spawn4_OBJECTS) $(spawn4_LDADD) $(LIBS)
time1$(EXEEXT): $(time1_OBJECTS) $(time1_DEPENDENCIES) 
	@rm -f time1$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(time1_OBJECTS) $(time1_LDADD) $(LIBS)
time2$(EXEEXT): $(time2_OBJECTS) $(time2_DEPENDENCIES) 
	@rm -f time2$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(time2_OBJECTS) $(time2_LDADD) $(LIBS)
time3$(EXEEXT): $(time3_OBJECTS) $(time3_DEPENDENCIES) 
	@rm -f time3$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(time3_OBJECTS) $(time3_LDADD) $(LIBS)
time4$(EXEEXT): $(time4_OBJECTS) $(time4_DEPENDENCIES) 
	@rm -f time4$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(time4_OBJECTS) $(time4_LDADD) $(LIBS)
time5$(EXEEXT): $(time5_OBJECTS) $(time5_DEPENDENCIES) 
	@rm -f time5$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(time5_OBJECTS) $(time5_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/chan1.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/proc1.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/rand1.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/rand2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/spawn1.Po@am__quote@

.C.o:
@am__fastdepCXX_TRUE@	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCXX_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@am__fastdepCXX_FALSE@	$(AM_V_CXX) @AM_BACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ $<

.C.obj:
@am__fastdepCXX_TRUE@	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
@am__fastdepCXX_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@am__fastdepCXX_FALSE@	$(AM_V_CXX) @AM_BACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.C.lo:
@am__fastdepCXX_TRUE@	$(AM_V_CXX)$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCXX_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
@am__fastdepCXX_FALSE@	$(AM_V_CXX) @AM_BACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(LTCXXCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

check-TESTS: $(TESTS)
	@failed=0; all=0; xfail=0; xpass=0; skip=0; \
	srcdir=$(srcdir); export srcdir; \
	list=' $(TESTS) '; \
	$(am__tty_colors); \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if $(TESTS_ENVIRONMENT) $${dir}$$tst; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xpass=`expr $$xpass + 1`; \
		failed=`expr $$failed + 1`; \
		col=$$red; res=XPASS; \
	      ;; \
	      *) \
		col=$$grn; res=PASS; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xfail=`expr $$xfail + 1`; \
		col=$$lgn; res=XFAIL; \
	      ;; \
	      *) \
		failed=`expr $$failed + 1`; \
		col=$$red; res=FAIL; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      col=$$blu; res=SKIP; \
	    fi; \
	    echo "$${col}$$res$${std}: $$tst"; \
	  done; \
	  if test "$$all" -eq 1; then \
	    tests="test"; \
	    All=""; \
	  else \
	    tests="tests"; \
	    All="All "; \
	  fi; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="$$All$$all $$tests passed"; \
	    else \
	      if test "$$xfail" -eq 1; then failures=failure; else failures=failures; fi; \
	      banner="$$All$$all $$tests behaved as expected ($$xfail expected $$failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all $$tests failed"; \
	    else \
	      if test "$$xpass" -eq 1; then passes=pass; else passes=passes; fi; \
	      banner="$$failed of $$all $$tests did not behave as expected ($$xpass unexpected $$passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    if test "$$skip" -eq 1; then \
	      skipped="($$skip test was not run)"; \
	    else \
	      skipped="($$skip tests were not run)"; \
	    fi; \
	    test `echo "$$skipped" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  if test "$$failed" -ne 0 && test -n "$(PACKAGE_BUGREPORT)"; then \
	    report="Please report to $(PACKAGE_BUGREPORT)"; \
	    test `echo "$$report" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$report"; \
	  fi; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  if test "$$failed" -eq 0; then \
	    echo "$$grn$$dashes"; \
	  else \
	    echo "$$red$$dashes"; \
	  fi; \
	  echo "$$banner"; \
	  test -z "$$skipped" || echo "$$skipped"; \
	  test -z "$$report" || echo "$$report"; \
	  echo "$$dashes$$std"; \
	  test "$$failed" -eq 0; \
	else :; fi

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
all-am: Makefile
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-checkPROGRAMS clean-generic clean-libtool \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: check-am install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-TESTS check-am clean \
	clean-checkPROGRAMS clean-generic clean-libtool ctags \
	distclean distclean-compile distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags uninstall uninstall-am


include ./$(DEPDIR)/par1.Po
include ./$(DEPDIR)/par2.Po
include ./$(DEPDIR)/par3.Po
include ./$(DEPDIR)/par4.Po
include ./$(DEPDIR)/par5.Po
include ./$(DEPDIR)/par6.Po
include ./$(DEPDIR)/par7.Po
include ./$(DEPDIR)/par8.Po
include ./$(DEPDIR)/par9.Po 
include ./$(DEPDIR)/par10.Po 
include ./$(DEPDIR)/qsort1.Po
include ./$(DEPDIR)/qsort2.Po
include ./$(DEPDIR)/chan2.Po
include ./$(DEPDIR)/chan3.Po
include ./$(DEPDIR)/chan4.Po
include ./$(DEPDIR)/chan5.Po
include ./$(DEPDIR)/chan6.Po
include ./$(DEPDIR)/chan7.Po
include ./$(DEPDIR)/chan8.Po
include ./$(DEPDIR)/chan9.Po
include ./$(DEPDIR)/chan10.Po
include ./$(DEPDIR)/chan11.Po
include ./$(DEPDIR)/chan12.Po
include ./$(DEPDIR)/chan13.Po
include ./$(DEPDIR)/chan14.Po
include ./$(DEPDIR)/chan15.Po
include ./$(DEPDIR)/chan16.Po
include ./$(DEPDIR)/chan17.Po
include ./$(DEPDIR)/chan18.Po
include ./$(DEPDIR)/chan19.Po
include ./$(DEPDIR)/chan20.Po
include ./$(DEPDIR)/chan21.Po
include ./$(DEPDIR)/chan22.Po
include ./$(DEPDIR)/chan23.Po
include ./$(DEPDIR)/chan24.Po
include ./$(DEPDIR)/chan25.Po
include ./$(DEPDIR)/spawn2.Po
include ./$(DEPDIR)/spawn3.Po
include ./$(DEPDIR)/mutex1.Po
include ./$(DEPDIR)/pri1.Po
include ./$(DEPDIR)/pri2.Po
include ./$(DEPDIR)/pri3.Po
include ./$(DEPDIR)/pri4.Po
include ./$(DEPDIR)/pri5.Po
include ./$(DEPDIR)/pri6.Po
include ./$(DEPDIR)/pri7.Po
include ./$(DEPDIR)/pri8.Po
include ./$(DEPDIR)/proc2.Po
include ./$(DEPDIR)/proc3.Po
include ./$(DEPDIR)/proc4.Po
include ./$(DEPDIR)/proc5.Po
include ./$(DEPDIR)/proc6.Po
include ./$(DEPDIR)/proc7.Po
include ./$(DEPDIR)/proc8.Po
include ./$(DEPDIR)/proc9.Po
include ./$(DEPDIR)/proc10.Po
include ./$(DEPDIR)/time1.Po
include ./$(DEPDIR)/time2.Po
include ./$(DEPDIR)/time3.Po
include ./$(DEPDIR)/time4.Po
include ./$(DEPDIR)/time5.Po
include ./$(DEPDIR)/clock1.Po
include ./$(DEPDIR)/clock2.Po
include ./$(DEPDIR)/clock3.Po
include ./$(DEPDIR)/clock4.Po
include ./$(DEPDIR)/clock5.Po
include ./$(DEPDIR)/clock6.Po
include ./$(DEPDIR)/clock7.Po
include ./$(DEPDIR)/clock8.Po
include ./$(DEPDIR)/clock9.Po
include ./$(DEPDIR)/clock10.Po
include ./$(DEPDIR)/clock11.Po
include ./$(DEPDIR)/clock12.Po
include ./$(DEPDIR)/clock13.Po
include ./$(DEPDIR)/clock14.Po
include ./$(DEPDIR)/clock15.Po
include ./$(DEPDIR)/quantity1.Po
include ./$(DEPDIR)/connect1.Po
include ./$(DEPDIR)/gc1.Po

# Use this for libtool linking- I didn't want the wrapper scripts, so I just do it manually.
#LDADD = $(top_srcdir)/src/libplasma.la $(top_srcdir)/qt/libqt.la $(top_srcdir)/gc/libgc.la -ldl
#LINK = $(LIBTOOL) --mode=link $(CXX) -o $@

.pa.o:
	if $(PLASMA) $(INCLUDES) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo $(CXXFLAGS) -c -o $@ $< ; \
	then mv "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po" ; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
