//
// Copyright (C) 2005 by Freescale Semiconductor Inc.  All rights reserved.
//
// You may distribute under the terms of the Artistic License, as specified in
// the COPYING file.
//
//
// Test of a fully interlocked "zero-sized" clocked channel
// with a flush signal.
//

#include <iostream>

#include "plasma.h"

using namespace std;
using namespace plasma;

typedef ClockChan<int> IntClkChan;

typedef ClkBroadcaster<int> IntBroadcast;
typedef IntBroadcast::input_channel BroadcastIn;
typedef IntBroadcast::output_channel BroadcastOut;

vector<int> Data;
bool        Halt = false;

template <class C> 
void flush_channel(C &c)
{
  if ( c . ready (  ) ) {
    c . get (  ) ;
  }
}

void begin_stage(int id,IntClkChan &out,BroadcastOut &flush)
{
  static int input_data[] = { 10,20,30,40,50,60,70,80,90,100,-1 };

  for (int *i = &input_data[0]; *i >= 0; ++i) {
    alt {
      flush.port() {
        i = &input_data[0];
        continue;
      }
      {}
    }
    cout << pTime() << ":  Writing " << *i << endl;
    Data[id] = *i;
    out.write(*i);
  }
  Data[id] = 0;
  out.write(-1);
}
void middle_stage(int id,int pause,int delay,IntClkChan &in,BroadcastOut &flush,IntClkChan &out)
{
 Start:
  flush_channel(in);
  Data[id] = 0;
  while (true) {
    int x;
    prialt {
      flush.port() {
        flush_channel(in);
        cout << pTime (  ) << ": (" << id << ") Got flush in prialt." << endl ;
        goto Start ;
      }
      in.port(int tmp) {
        x = tmp ;
      } 
    }
    Data[id] = x;
    if (x == pause) {
      for (int i = 0; i != delay; ++i) {
        cout << pTime() << ": (" << id << ") Delaying." << endl;
        pDelay(1);
        alt {
          flush.port() {
            cout << pTime() << ": (" << id << ") Got flush in delay loop." << endl;
            goto Start;
          }
          {}
        }
      }
    }
    out.write(x);
    Data[id] = 0;
  }
}

void end_stage(int id,IntClkChan &in,BroadcastOut &flush,BroadcastIn &flush_out)
{
  bool do_flush = true;
  int x;
  do {
    prialt {
      flush.port() {
        Data [ id ] = 0 ;
        flush_channel(in);
        continue ;
      } 
      in.port(int tmp) {
        x = tmp ;
      } 
    }
    Data[id] = x;
    if (x == 10 && do_flush) {
      flush_out.write(1);
      do_flush = false;
      cout << pTime() << ":  Sent flush." << endl;
    }
  } while (x >= 0);
  Halt = true;
}

void report()
{
  while(true) {
    cout << "\nDATA:  Time:  " << pTime() << ":\n";
    for (unsigned i = 0; i != Data.size(); ++i) {
      cout << "DATA:    " << i << ":  " << Data[i] << '\n';
    }
    cout << endl;
    if (Halt) break;
    pDelay(1);
  }
}

void pSetup(ConfigParms &cp)
{
  cp._busyokay = true;
}

int pMain(int,const char **)
{
  int size = 0;
  IntClkChan one_two(1,0,size);
  IntClkChan two_three(1,0,size);
  IntClkChan three_four(1,0,size);
  IntClkChan four_five(1,0,size);
  
  IntBroadcast flush;

  Data.resize(5);

  par {
    on (pCurProc(),10) {
      par {
        begin_stage(0,one_two,flush.get_sink());
        middle_stage(1,-2,0,one_two,flush.get_sink(),two_three);
        middle_stage(2,20,2,two_three,flush.get_sink(),three_four);
        middle_stage(3,-2,0,three_four,flush.get_sink(),four_five);
        end_stage(4,four_five,flush.get_sink(),flush.get_source());
      }
    }
    report();
  }

  return 0;
}
