//
// Copyright (C) 2005 by Freescale Semiconductor Inc.  All rights reserved.
//
// You may distribute under the terms of the Artistic License, as specified in
// the COPYING file.
//
//
// This creates a simple pipeline and passes data through it- each
// stage of the pipeline uses a clocked channel so that time advances.
// This also makes sure that par blocks can be nested within alt blocks
// and that port variables are correctly added to the environment so that
// a nested par block will know to make it an argument.
//
// This also tests the energy usage feature of Plasma.
//

#include <iostream>

#include "plasma.h"
#include "Energy.h"

using namespace std;
using namespace plasma;

typedef Channel<int> Chan;
typedef ClockChan<int> ClkChan;

void start(ClkChan &out1,Chan &out2)
{
  for (int i = 0; i != 10; ++i) {
    int v2 = i * 20;
    int v1 = i * 10;
    pEnergy(10);
    cout << "producer:  Data is " << v1 << "," << v2 << " at " << pTime() << "." << endl;
    par {
      out1.write(v1);
      out2.write(v2);
    }
  }
  out1.write(-1);
  out2.write(-1);
}

void middle(int c,ClkChan &in1,Chan &in2,ClkChan &out1,Chan &out2)
{
  while (true) {
    alt {
      in1.port(int v1) {
        int v2 = in2.get();
        v1 *= 10;
        v2 *= 10;
        pEnergy(10);
        cout << "con" << c << ":  Data is " << v1 << "," << v2 << " at " << pTime() << "." << endl;
        par {
          out1.write(v1);  // Note:  Port variable used in par block.
          out2.write(v2);
        }
      }
    }
  }
}

void end(int c,ClkChan &in1,Chan &in2)
{
  while (true) {
    alt {
      in1.port(int v1) {
        int v2 = in2.get();
        v1 *= 10;
        v2 *= 10;
        pEnergy(10);
        cout << "con" << c << ":  Data is " << v1 << "," << v2 << " at " << pTime() << "." << endl;
        if (v1 < 0 && v2 < 0) {
          cout << "Done." << endl;
          pExit(0);
        }
      }
    }
  }
}

void energy(int period)
{
   while (1) {
      // Test the read function.
      energy_t e = pReadEnergy(pCurProc());
      // Test the get function.
      if (e != pGetEnergy(pCurProc())) {
         pAbort("Mismatch between read and get!");
      }
      cout << pTime() << ": current energy:  " << e << ", current power:" << (e/period) << "mW" << endl;
      pDelay(period);
   }
}

void pSetup(ConfigParms &cp)
{
  cp._busyokay = true;
}

int pMain(int,const char*[])
{
  const int Clk = 10;
  ClkChan clk1(Clk),clk2(Clk),clk3(Clk),clk4(Clk);
  Chan d1,d2,d3,d4;

  par {
    energy(Clk);
    on (pCurProc(),0) { 
      par {
        start(clk1,d1);
        middle(1,clk1,d1,clk2,d2);
        middle(2,clk2,d2,clk3,d3);
        middle(3,clk3,d3,clk4,d4);
        end(4,clk4,d4);
      }
    }
  }
  return 0;
}
