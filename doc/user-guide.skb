

(chapter :title "Plasma User's Guide"

(p [This document describes PLASMA (Parallel LAnguage for System Modeling and
Analysis).  It is a superset of C++ which adds concurrency constructs, a concept
of simulation time for discrete, and various safety features.])

(section :title "Usage"

(p [Plasma is currently implemented as a front-end which converts a PLASMA
program into C++, then invokes g++ to compile this into either an executable or
into an object file.  As such, its options are basically those of g++.  General
usage is:])

(cprog [  plasma <options> <input file> ])

(p [An input file has an extension of ,(code [.pa]).])

(p [For example, to create an executable from a single Plasma file:])

(cprog [ plasma -g -Wall -O3 foo.pa -o foo ])

(p [To create an object file, use the ,(b [-c]) option:])

(cprog [ plasma -g -Wall -O3 -c foo.pa -o foo.o ])

(p [To link, use ,(b[ld]) or ,(b [g++]).  The script ,(b[plasma-config]) exists to supply the
required link line.  For example:])

(cprog [
         plasma -c -o a.o a.pa
         plasma -c -o b.o b.pa
         g++ -o prog a.o b.o `plasma-config --libs`])

(p [Within a ,(i [makefile]), use ,(code [$(shell plasma-config --libs)]) to generate the link line.])

)

(section :title "Concurrency"

(p [This section discusses the new language features added in order to support
concurrency.  These fall into two main categories: Thread creation and thread
communication.])

(ssection :title "Thread Creation"

(sssection :title "Par Block"

(p [The ,(b [par]) block executes each statement in parallel, waiting until all
child threads are finished before proceeding.  For example:])

(cprog [
        int x,y,z;
        par {
          x = sub1();
          y = sub2();
        }
        z = sub3();
])

(p [In the above example, the statement ,(code [x = sub1()]) and the statement
,(code [y = sub2()]) will execute in parallel.  Both will complete before the
statement ,(code [z = sub3()]) is executed.  To create a more complex in-line
operation, simply use a brace-delineated block, e.g.:])

(cprog [
        par {
          {
            <sequence of statements>
          }
          {
            <sequence of statements>
          }
        }
])

)

(sssection :title "PFor Loop"

(p [The ,(b [pfor]) loop acts like a for-loop, except that for each loop
iteration, its body is launched as a separate thread.  All threads must then
complete before execution continues past the loop.  For example:])

(cprog [
        const int Max = 10;
        int results\[Max\];
        pfor (int i = 0; i != Max ++i)  {
          results\[i\] = sub(i);
        }

])

(p [In this example, ten threads will be launched.  Each will return a result which
is stored into an element of the ,(i [results]) array.])

(p [An important feature of the ,(b [pfor]) loop is that variables declared in the loop
condition are passed by value to each thread, while all other variables are
passed by reference, and thus may be modified.  Thus, each thread contains a
copy of the index variable ,(b [i]) but may directly modify ,(b [results]).])

)

(sssection :title "Spawn Operator"

(p [The ,(b [spawn]) operator creates a thread and returns a handle object which allows
the result of the thread to be retrieved.  ,(b [spawn]) takes a single argument
which must be some sort of function invocation.  This might be an actual
function, a method call, etc.  The list of supported types is:])

(itemize

(item [Literal function call: ,(code [spawn(foo());])])

(item [Function pointer call: ,(code [p = foo; spawn(p());])])

(item [Method call w/reference: ,(code [spawn(a.b());])])

(item [Method call w/pointer: ,(code [spawn(a->b());])])

(item [Static method call: ,(code [spawn(A::b());])])

(item [Method pointer w/reference: ,(code [p = &A::b; spawn(a.*p());])])

(item [Method pointer w/pointer:  ,(code [p = &A::b; spawn(a->*p());])])

)

(p [The function's arguments are evaluated immediately; a thread is then launched
of the function with its arguments.  The function itself must return some type
of value; void functions are not allowed.  In addition, the result type must
have a default constructor.])

(p [The ,(b [spawn]) operator returns an object of type ,(code [Result<T>]), where ,(b [T]) is
the return type of the invoked function.  Calling the ,(code [value()]) method returns
the result of the thread; if the thread is not yet finished, it will block.
Calling ,(code [wait()]) will wait until the thread is finished and calling ,(code [kill()])
will terminate the thread.  In the latter case, the result of the thread will
be the default constructor value of the return type.])

(p [A simple example is:])

(cprog [

  double foo(double a,double b)
  {
    int xx = 0;
    for (int i = 0; i != 100000000; ++i) {
      xx += 1;
    }
    return a*a + b*b;
  }

  int pMain(int argc,const char *argv\[\])
  { 
    Result<double> r1 = spawn(foo(1.1,2.2));
    Result<double> r2 = spawn(foo(2.7,9.8));
    cout << "Result is:  " << r1.value() << ", " << r2.value() << endl;
    return 0;
  }

])

)

(mark "ResultCheck")

(p [A common use of the ,(b [spawn]) operator is to launch a series of threads,
push their ,(b [Result]) objects into a container, then iterate over that
container, testing each value with a predicate.  This act causes the parent (the
thread that is doing the iteration) to wait until all threads are done, acting
as a synchronization point.])

(p [Plasma provides templates for doing this.  The most general case is called
,(code [ResultCheck<typename R,typename Pred>]), where ,(code [R]) is the type
returned by the spawned functions and ,(code [Pred]) is a predicate function.
The user can then call ,(code [ResultCheck::check()]) to perform the iteration.
If the predicate fails (returns false), ,(code [check()]) stops and returns
false.])

(p [Frequently, ,(code [ResultCheck]) is used to check that all threads return
an expected value, e.g. true.  The ,(code [ValueCheck<T>]) class will do this.
It accepts the expected value as a constructor argument.  A helper function
,(code [make_valuecheck()]) simplifies the creation of the object.])

(p [For instance:])

(cprog [ 

  ValueCheckGen<Foo> results(make_valuecheck(foo));

])

(p [where ,(bold [Foo]) is a type and ,(bold [foo]) is an instance of the type,
e.g. ,(code [bool]) and ,(code [true]).  You then add threads like this:])

(cprog [
    
  results.push_back(spawn(myfunc(1,2,3)));
  
])

(p [And check the results like this:])

(cprog [
  
  if (!results.check()) { return false; };

])

(p [You can reuse it by calling clear:])

(cprog [

  results.clear();

])

(p [Since a boolean is frequently used, a typedef is provided, called ,(code
[BoolCheck]).  Use this to capture and test the result of spawned functions
which return booleans.])

)

(ssection :title "Thread Control"

(p [The following functions provide control over threads.  These are declared in
,(code [plasma-interface.h]) which is implicitly included in all plasma (.pa) files.])

(itemize

(item [,(code [THandle pCurThread()]):  Return a handle to the current thread.])

(item [,(code [pWait(THandle)]):  Wait until the specified thread is finished.])

(item [,(code [pYield()]):  Have the current thread swap to the next ready thread.])

(item [,(code [pTerminate()]):  Kill the current thread.])

(item [,(code [pLock()]):  Turn off time-slicing.])

(item [,(code [pUnlock()]):  Turn on time-slicing.])

(item [,(code [pExit(int code)]):  Terminate the program with the specified exit code.])

(item [,(code [pAbort(char *)]): Abort the program gracefully with error message
and return exit code -1.])

(item [,(code [pPanic(char *)]):  Abort program immediately with error message and return
    exit code -1.])

)

)

(ssection :title "The Time Model"

(p [Plasma implements a time model so that users may experiment with mapping an
algorithm to a possible hardware configuration.  The model works along the lines
of a discrete event simulator:  A thread may delay itself, in which case it
stays idle until a specified amount of time has passed, or it may explicitly
consume time.  In other words, actual work done by the thread takes zero time
but to model algorithmic complexity, explicit calls may be made to simulate a
piece of hardware doing real work.])

(p [Time in plasma consists of discrete time ticks, but no unit is associated with
the time.  The main time type is a 64-bit integer.])

(p [There are three main functions for the time mode:])

(itemize

(item [,(code [pDelay(x)]):  Delay for ,(b [x]) time units.  The thread will be idle for
this period of time.])

(item (p [,(code [pBusy(x)]): Consume ,(b [x]) time units.  This means that the
processor is "busy" for this long.  In order to use ,(code [pBusy()]), you must set
,(code [ConfigParms::_busyokay]) to true.  If not, a runtime error will occur when the
function is called.  If you are in the busy-mode then preemption is disabled;
the only thread switches will be during alt, wait, delay, or busy commands.])

(p [Lowest priority threads are time-sliced.  The time slice value is set by
setting ,(code [ConfigParms::_simtimeslice]) in ,(code [pSetup()]).  What this means is that
a busy command will be divided up until these timeslices, allowing the same
processor to squeeze in work from other threads.]))

(item [,(code [pTime()]):  Returns the current system time.])

)

(p [The user may declare multiple processors by declaring a ,(b [Processor]) object,
e.g.:])

(cprog [

Processor a;

])

(p [To create a vector of Processors, use the ,(code [Processors]) data
structure:])

(cprog [

  Processors procs(10);

])

(p [New threads will be launched on their parent's processor unless one of the
following mechanisms is used:])

(itemize 

(item (p [With a ,(b [par]) or ,(b [pfor]) block, using an ,(b [on]) block:])

(cprog [

    par {
       on (<proc name>) { ... }
       ...
    }

])

)

(item [With the spawn command:

,(cprog [

    <proc name>.spawn(<command>);

])
])

)

(p [Each ,(b [Processor]) may be given a name by passing a ,(code [const char *]) to the
constructor or the ,(b [setName]) method.  This pointer is unmanaged by the
,(b [Processor]) and is simply stored as-is.  This means that you can compare it
against another pointer for quick identification purposes.])

(p [By default, each processor has its own issue queue and threads must
be explicitly launched on another processor.  However, Plasma has support for allowing a
group of processors to share a common issue queue.  This allows for the modeling
of SMP systems.  To do this, the user either creates a new processor using the
,(code [make_sharedproc()]) function, or creates an array of processors by
specifying ,(i [true]) for the third argument of the ,(code [Processors])
constructor:])

(cprog [

  Processor a = make_sharedproc(pCurProc());

  Processors procs(10,"terminals",true);

])

(p [In the above code, processor ,(code [a]) shares its ready queue with the
current processor and the ten processors declared by ,(code [procs]) all share
the same ready queue.])

(p [In the following example, even though all of the threads are launched on the
same processor (element 0 of the ,(code [procs]) array), they all finish in 50
time units.  This is because the other nine processors share the same ready
queue and are able to schedule these threads.])

(cprog [

  Processors procs(10,"processors",true);

  pfor (int i = 0; i != 10; ++i) {
    on (procs\[0\]) {
      cout << "Block " << i << " start:  " << pTime() << endl;
      pBusy(50);
      cout << "Block " << i << " done:  " << pTime() << endl;      
    }
  }

])

(p [The output from this program fragment is:])

(cprog [
Block 0 start:  0
Block 1 start:  0
Block 2 start:  0
Block 3 start:  0
Block 4 start:  0
Block 5 start:  0
Block 6 start:  0
Block 7 start:  0
Block 8 start:  0
Block 9 start:  0
Block 0 done:  50
Block 8 done:  50
Block 1 done:  50
Block 9 done:  50
Block 7 done:  50
Block 5 done:  50
Block 2 done:  50
Block 6 done:  50
Block 4 done:  50
Block 3 done:  50
])

)

(ssection :title "Priorities"

(p [Threads in Plasma have priorities.  By default, a thread's priority is the
same as its parent's priority, with ,(code [pMain()]) starting at the lowest
priority.  Priorities are specified as an integer, where 0 is the highest.  The
number of priorities may be set by the configuration parameter ,(code
[ConfigParms::_numpriorities]).  The default value is 32.])

(p [Priorities may be specified using a functional API or as optional arguments to
,(b [spawn]) or ,(b [on]):])

(itemize 

(item [,(code [pSetPriority(int)]): Set current thread's priority.])

(item [,(code [pGetPriorities()]):  Return current thread's priority.])

(item [,(code [pLowestPriority()]):  Return the lowest priority (timeslice queue).])

(item [Optional second argument to ,(b [spawn]) of a priority, e.g. ,(code [spawn(foo(),0);])])

(item [Optional second argument to ,(b [on]) block of a priority, e.g. ,(code
[on(p1,0) { ... }])])

)

(p [For any given processor, threads execute in priority order, with timeslicing
only for the lowest priority thread.  Of course, if a higher priority waits on
another thread or enters an alt block, there is the possibility that a lower
priority thread may execute.  In other words, given the following code
fragment:])

(cprog [

    par {
      on (pCurProc(),0) { /* thread 1 */ }
      on (pCurProc(),1) { /* thread 2 */ }
      { /* thread 3 */ }
      { /* thread 4 */ }
    }

])

(p [Thread 1 will execute first and complete before thread 2, which will also
execute to completion before threads 3 and 4.  Threads 3 and 4 will execute in a
time-sliced fashion.  Note the use of ,(code [pCurProc()]):  The only way to set a
priority with the ,(b [on]) block is to use two arguments.  If you want the thread
to execute on the current processor, you must call ,(code [pCurProc()]) to return the
current processor.])

)

(ssection :title "Thread Communication"

(sssection :title "Channels"

(p [One method for threads to communicate among themselves is to use a channel.
This is simply a data structure which allows one thread to write a value to it
and another thread to read this value.  It is up to the channel to make sure
that these operations are safe and to ensure proper flow control.  Any class may
be a channel as long as it has a specific interface.  This interface is required
in order to use the ,(b [alt]) and ,(b [afor]) constructs.])

(p [The required interface for a channel of type ,(b [T]) is:])

(itemize

(item [,(code [T read()]): Returns a value read from the channel.  Blocks if no value is
   present.  Returns the last value read, until clear_ready() is called.])

(item [,(code [T get()]): Returns a value from the channel.  Blocks if no value
is present.  Always fetches a new value.  After a call to this, ,(code [read()]) will
return this same value.])

(item [,(code [void write(T)]): Writes a value to the channel.  May block,
depending upon the channel definition.])

(item [,(code [bool ready() const]): Returns true if the channel has a value.])

(item [,(code [void clear_ready()]): Clears the ready status, forcing the fetch
of a new value.])

(item [,(code [set_notify(Thread *t,int handle)]): Stores the thread and handle.
When the channel gets a value, it will wake this thread, giving it the handle.])

(item [,(code [clear_notify()]): Clears the stored thread so that no
notification will take place if a value is written to the channel.  It must be
possible to call ,(code [clear_notify()]) safely, e.g. this should not affect
the behavior of a blocked writing thread.])

)

(p [Note that ,(code [write()]), ,(code [read()]), and ,(code [clear_ready()])
are technically not required by ,(b [alt]) and ,(b [afor]).  Thus, it's possible to
have a read-only channel.])

(p [Currently, Plasma contains the following channels.  These are declared in
,(code [plasma.h]).])

(itemize

(item [,(code [Channel<class Data>]): This is a typed channel which reads and
writes an object of type ,(i [Data]).  It contains only a single copy of this
object; a second write will block if the first write's data has not been read.
It may be used with multiple producers, but only a single consumer is allowed.])

(item [,(code [QueueChan<class Data>]): This is a typed queued channel: It
allows for multiple producers and requires a single consumer.  By default, the
queue size is not fixed, but the user may set a maximum size by specifying it as
the constructor argument.])

(item (p [,(code [Timeout]): Use this to break out of an ,(b [alt]) block after
a specified amount of simulation time.  It uses ,(code [pDelay()]) to block for
a given amount of time.  If nothing else has awakened the alt block thread
before then, this will.  It does not return a useful value, so it is generally
used with an empty port statement, e.g.:])

(cprog [

     Timeout t(20);
     alt {
       c0.port(...) { ... }
       c1.port(...) { ... }
       t.port() { cout << "Got a timeout!" << endl; }
     }

])

(p [In the above example, a ,(b [Timeout]) object is created which will awaken an
alt block after 20 time units.]))

(item (mark "clocked-chan") (p [,(code [ClockChan<class Data,class Container =
list<Data> >]): Clocked channels allow for the easy modeling of clocked
hardware.  The basic idea is that data may be written at any time, but the
channel may only be read at certain intervals.  This interval is specified by
the constructor.  For instance, a clocked channel with a period of 10 will block
until the time is a multiple of 10.  This class can be used in a queued or
non-queued manner, also specified by a constructor argument.  The second
template parameter allows the user to specify an alternate container to hold the
queued data.])
    
(p [The basic idea of clocked channels is to let the channel worry about time,
rather than the user's code.  In other words, to model a pipeline, each pipeline
stage acts as a consumer of data from the prior stage and a producer for the
next stage.  The communication occurs through clocked channels so that the
timing is invisible to each stage, and is instead coordinated solely by the
channels.])

)

(item (p [,(code [ResChan<class Data>]): The ,(b [spawn]) operator may be
interfaced to an ,(b [alt]) construct by using this class.  This is a read-only
channel which will return the result value of the spawned thread.  For example:])

(cprog [

     double foo(double a,double b)
     {
       int xx = 0;
       for (int i = 0; i != 100000000; ++i) {
         xx += 1;
       }
       return a*a + b*b;
     }

     int bar(int a)
     {
       return a * a * a;
     }

     void check(ResChan<double> &a,ResChan<int> &b)
     {
       for (int i = 0; i != 2; ++i) {
         alt {
           a.port(double x) {
             cout << "x:  " << x << endl;
           }
           b.port (int y) {
             cout << "y:  " << y << endl;        
           }
         }
       }
     }

     int pMain(int argc,const char *argv\[\])
     { 
       ResChan<double> r1 = spawn(foo(1.1,2.2));
       ResChan<int> r2 = spawn(bar(123));
       check(r1,r2);
       return 0;
     }

]))

)

)

(sssection :title "Alt Blocks"

(p [An ,(b [alt]) block allows for unordered selection of data from channels.  Its
syntax is:])

(cprog [

  alt {
    <channel expr> \[ . | -> \] port (<value decl>) { <body> }
    \[ alt { ... } \]
    \[ afor { ... } \]
    \[ { <default block> } \]
  }

])

(p [Each ,(b [port]) statement specifies a channel to be read (the channel expression) and
an optional declaration which will receive the channel value.  The ,(b [port]) body
has access to this value.  If no value declaration is specified, the channel's
data is not accessible.  This is useful for channels whose data is simply a
boolean state, such as a time-out channel.])

(p [Upon entry to the ,(b [alt]) block, all channels are checked for data.  If a
channel has data, the body of the corresponding ,(b [port]) statement is executed.
If more than one channel is ready, a single port statement is selected
non-deterministically.  If no channels are ready, the thread will sleep until a
channel has data.])

(p [If a default block is specified, the ,(b [alt]) block will never cause the thread
to sleep.  Instead, if no channels have data, the default block will be
executed.])

(p [,(b [alt]) and ,(b [afor]) (explained below) blocks may be nested within ,(b [alt])
blocks.  This allows the user to block on multiple collections of channels, or a
collection of channels plus one or more single channels, etc.])

)

(sssection :title "Afor Blocks"

(p [An ,(b [afor]) block is similar to an ,(b [alt]) block, except that it allows the user
to loop over a data structure of channels.  Its syntax is:])

(cprog [

  afor ( <s1> ; <s2> ; <s3> ) {
    <channel expr> \[ . | -> \] port (<value decl>) { <body> }
    \[ { <default block> } \]
  }

])

(p [Only a single ,(b [port]) statement is allowed.  The ,(b [afor]) block is treated as a
for-loop, looping over all channels specified by the channel expression.  An
iterator variable must be declared in ,(i [s1]); its value is accessible to the
channel expression and the ,(b [port])'s body.])

(p [For example, the following code loops over an array of channels.  As in the
,(b [alt]) block, the thread will sleep if no channels are ready and there is not a
default block.:])

(cprog [

  afor (int i = 0; i != (int)channels.size(); ++i) {
    channels\[i\].port (int v) {
      printf ("Got a value from port %d:  %d\\n",i,v);
      if (v < 0) ++donecount;
    }
  }

])

(p [Plasma allows for non-integer index variables but this requires the creation of
an auxiliary data structure, so performance might be a little slower, e.g. using
an iterator rather than an integer as an index.])

(p [There are a few restrictions to follow for the ,(b [afor]) block:])

(itemize 

(item [You must declare the loop iterator in the first statement of the ,(b [afor])
block.])

(item [The loop will occur multiple times, so make sure that there are no
side-effects.])

(item [You only have access, within the ,(b [port]) body, to the first loop
iterator variable.  Therefore, avoid fancy ,(b [afor]) loops which declare multiple
variables in the first statement or update multiple variables in the third
statement.])

)

(p [As noted above, an ,(b [afor]) block may be nested within an ,(b [alt]) block.  This
allows you to block on one or more collections and/or to block on a collection
plus one or more single channels.  For example, the following code will block
on a collection and an override channel:])

(cprog [

  alt {
    afor (int i = 0; i != (int)channels.size(); ++i) {
      channels\[i\].port (int v) {
        printf ("Got a value from port %d:  %d\\n",i,v);
        if (v < 0) ++donecount;
      }
    }
    stopchan.port (bool b) {
      if (b) {
        printf ("Got a stop command!\\n");
      }
    }
  }

])

)

(sssection :title "Shared Data Structures"

(p [Threads may also communicate using shared data structures whose access methods
are protected by special synchronization primitives.  There are two means to do
this.  The easiest is to declare a class as being a mutex class:])

(cprog [

  pMutex class X { };

])

(p [This will wrap all public methods of class ,(b [X]), except for constructors and
its destructor, with serialization code.  To prevent this on a per-method basis,
use the modifier ,(i [pNoMutex]):])

(cprog [

  pMutex class Foo {
  public:
    // Not protected.
    Foo();
    ~Foo();
    // Protected.
    int a();
    // Not protected.
    pNoMutex int b();
  private:
    // Not protected.
    int c();
  };    

])

(p [Be careful with using ,(i [pNoMutex]):  Since it disables serialization, it is
inherently dangerous.  It is useful, though, when you have a constant method
whose return value would not be affected by a thread preemption.  For example, a
method which returns a constant which is only initialized at construction time.])

(p [The other method for creating a shared data structure is to directly use the
,(code [pLock()]) and ,(code [pUnlock()]) primitives.  This is more error prone than using
,(i [pMutex]) but might be necessary in some cases, such as for protecting a plain function:])

(cprog [

  void msg(const char *fmt, ...) {
    pLock();
    va_list ap;
    va_start(ap,fmt);
    vprintf(fmt,ap);
    va_end(ap);
    pUnlock();
  }

])

)

)

)

(section :title "Garbage Collection"

(p [Plasma is equipped with a garbage collector.  This means that heap-allocated
objects do not need to be explicitly freed; they will be collected when no more
pointers to the object remain.  This implicitly managed memory (referred to as
simply ,(i [managed]) from now on) may be used alongside explicitly managed memory,
where a call to delete is required.])

(p [By default, allocations using ,(b [new]) are explicitly managed.  To allocate
managed memory, you may derive an object from ,(b [gc]) or ,(b [gc_cleanup]) or
allocate using the ,(b [GC]) or ,(b [UseGC]) placement attribute.])

(p [For example, the following class will be managed when allocated using ,(b [new]):])

(cprog [

    class A : public gc { };

])

(p [However, its destructor will not be called.  If you derive from ,(b [gc_cleanup]),
the class's destructor will be called when the object is collected.])

(p [An example of using the ,(b [GC]) placement attribute is:])

(cprog [

   int *x = new (GC) int\[1000\];

])

(p [This will allocate a block of memory that is managed by the collector.])

(p [You may delete memory that is managed, but this is generally discouraged, since
the collector will collect it when it is safe to do so.])

)

(section :title "Library Features"

(p [This section describes functions and classes provided by the Plasma standard
library, ,(code [plasma.h]).])

(ssection :title "I/O Routines"

(p [A series of ,(b [printf])-style routines are provided which implement
mutex-protected I/O routines.  These are:])

(itemize

(item [,(code [int mprintf(const char *format, ... );])])

(item [,(code [int mfprintf(FILE *,const char *format, ...);])])


(item [,(code [int mvprintf(const char *format, va_list ap);])])

(item [,(code [int mvfprintf(FILE *,const char *format,va_list ap);])])

)

(p [These behave just like the standard routines, except that they are protected
from preemption while they are executing.])

)

(ssection :title "String Routines"

(p [Strings, such as ,(b [Processor]) names, are garbage collected in Plasma.  This may
interfere with using the C++ string class, since it generally manages its own
memory.  Thus, when passing a string to a ,(b [Processor]) via ,(code [setName()]) or a
constructor, if the string is not a constant, you should duplicate it using ,(code [gc_strdup()]).])

(itemize

(item [,(code [char *gc_strdup(const char *);])])

(item [,(code [char *gc_strdup(const std::string &s);])])

)

(p [Both of the above routines duplicate their argument using GC-allocated memory.])

)

(ssection :title "Random Number Generation"

(p [The template ,(code [Random<Gen>]) is provided for random number generation.  It takes
as a parameter a generator class, which does the actual work of generating
pseudo-random numbers.  The ,(i [Random]) class wraps this generator and provides
various functionality, such as supporting ,(b [N]) streams of independent
random number generation and the ability to read and write the state of these
generators using C++ streams.])

(p [Several different generators are provided:])

(itemize 

(item [,(b [LcgRand]):  Linear-congruential generator with period of 2,(sup [32]).  This is a
reversible function.  Its state is stored in one 32-bit word.])

(item [,(b [KissRand]):  A combination of several generators, it has a period of 2,(sup [127]).
It is not reversible.  Its state is stored in 5 32-bit words.])

(item [,(b [MtRand]):  The Mersenne Twist random number generator has a period of
2,(sup[19937])-1.  It is reversible.  Its state is stored in 625 32-bit words.])

)

(p [The default generator is ,(b [KissRand]).])

(p [The simplest way to use ,(b [Random]) is to simply generate an unsigned integer by
calling ,(code [genrand()]) or generate a double in the range of \[0,1\] by calling
,(code [gendbl()]).  For example:])

(cprog [

         Random<> Rand;                // Instantiate w/default generator.

         unsigned x = Rand.genrand();  // Generate unsigned integer in \[0,0xffffffff\].
         double y = Rand.gendbl();     // Generate double in \[0,1\].

])

(p [To create 3 independent generators with the Mersenne Twist algorithm:])

(cprog [
         Random<MtRand> Rand(3);

         unsigned x = Rand.genrand(0); // Generate using stream 0.
         unsigned y = Rand.genrand(1); // Generate using stream 1.
         unsigned z = Rand.genrand(2); // Generate using stream 2.

])

(p [The class can then be saved to a stream, for example to checkpoint the current
state of a simulation:])

(cprog [
         ostringstream os;
         Rand.save(os);                // Save the generators' state.

         istringstream is(os.str());
         Rand.load(is);                // Load the generators' state.

])

(p [,(b [Random]) may also generate numbers using several distributions.
Currently, the distribution functions only support unsigned integers.  The
various distributions are shown below.  For each function, the first parameter
specifies which stream to use for generation.])

(itemize 

(item [,(code [unsigned uniform(unsigned s,unsigned base,unsigned limit)]):
Generates a uniform random number in \[,(i[base]), ,(i[limit])\].  The
,(i[limit]) must be greater than ,(i[base]).])

(item [,(code [unsigned triangle(unsigned s,unsigned l,unsigned mode,unsigned
u)]): Generates using a triangle distribution in \[,(i[l]), ,(i[u]) \),
with the peak of the distribution specified by ,(i[mode]).  Upper must be
greater than lower.])

(item [,(code [unsigned exponential(unsigned s,unsigned scale,double lambda)]):
Generates an exponential distribution in \[0, ,(i [scale]) \) with ,(i
[lambda]) describing the fall-off rate.])

(item [,(code [unsigned normal(unsigned s,unsigned mean,double std_dev)]):
Generates a normal distribution with the curve centered around ,(i [mean]).])

)

)

)

)
