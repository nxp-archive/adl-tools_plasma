
(chapter :title "Future Work"
      
   (p [The current version of Plasma exists as a prototype.  It is implemented
   as a front-end filter, using ,(ref :text "OpenC++" :url
   "http://sourceforge.net/projects/opencxx/"), which converts Plasma code into
   C++ code and calls to a simple user-mode thread package.  The threads are
   implemented using ,(ref :text "Quickthreads" :url
   "http://www.cs.washington.edu/research/compiler/papers.d/quickthreads.html").
   If work on Plasma proceeds, it would be productized by a professional
   compiler company, such as Metrowerks.])
   
   (section :title "Productization Improvements"
   
      (p [This section lists various improvements which would be made for a
      production-ready version of Plasma:])
      
      (itemize 
	 
	 (item 
	    
	    (p [The final product will feature a thread-aware compiler which
	    would produce more highly optimized code, e.g. on a thread-yield,
	    the compiler would only save the state of live registers.])
	    
	    (p [A thread-aware compiler will be able to perform additional
	    checking to ensure program correctness.  For example, a
	    non-mutex-protected variable will not be allowed to be written to by
	    more than one thread unless the compiler can prove that no conflicts
	    will arise.])
	    
	    (p [A mechanism will be added so that containers may be
	    safely sliced, allowing multiple threads to work on non-overlapping
	    portions.  For example, two threads could work on two
	    non-overlapping slices of an array by creating two array slices.
	    This might be implemented in a manner similar to the ,(code
	    [valarray]) and ,(code [slice]) classes of the standard library.])
	    
	    )
	 
	 (item
	    
	    (p [The prototype version of Plasma uses only user-mode threads.  In
	    other words, all threads currently run in the same process.  This
	    will be enhanced to support kernel mode threads.  The user will be
	    able to designate that a ,(code [Processor]) should be placed in
	    another kernel thread.  This will allow true multi-threading on a
	    multi-way machine.]))
	    
	 (item
	    
	    (p [The compiler will be aware of the garbage collector and will
	    optimize accordingly.  For instance, the default ,(code [new])
	    operator for a class would allocate from the atomic heap if the
	    class did not contain any internal pointers.  The default behavior
	    for allocation might change so that a class is allocated from the
	    collected heap unless the user specifies otherwise.  For example,
	    the user must currently write:])
	    
	    (cprog [ class Foo : public gc])
	    
	    (p [to indicate that the class should be managed.  Instead, we might
	    change it so that the inverse is true:])
	    
	    (cprog [ class Foo : public NoGC])
	    
	    (p [to indicate that a class should not be managed.  Otherwise, it
	    will be.])

	    (p [The underlying collector, however, would always have a
	    conservative component so that unmodified C++ code could always be
	    used with Plasma.  Although we might change Plasma so that, by
	    default, a class is allocated from the gc heap, the behavior of a
	    C++ library that is linked in would not change.])
	    
	    (p [Other improvements might include scan functions for Plasma
	    classes, compaction for Plasma classes, and incremental
	    collection.])
	   	    
	    )
	 
	 (item
	       
	    (p [Plasma is designed to be a garbage-collected language, so
	    garbage collector aware containers are a necessity.  The standard containers,
	    e.g. ,(code [vector]), ,(code [list]), etc., would be traced by the
	    conservative collector.  Currently, one has to write:])

	    (cprog [ vector<int,traceable_allocator<int> > ])

	    (p [This will become the default.  Equivalent containers,
	    e.g. ,(code [gc_vector]), ,(code [gc_list]), will exist which will
	    allocate from the managed heap and will not invoke destructors when
	    destroyed.  An efficient, managed string class will also be
	    added.])
	       
	    )
	 
	 (item
	    
	    (p [To be useful for modeling hardware, Plasma will need a data-type
	    for modeling arbitrary-width integers.  This will be implemented
	    using a templated numerical class such as that found in SystemC.  In
	    fact, we might just want to use the SystemC class, if licensing
	    permits.  It should be possible, though the use of template
	    specialization, to create highly optimized versions for common
	    cases.  For instance, 32-bit or smaller bit vectors would use
	    standard integers, 64-bit or smaller integers would use long-long
	    arithmetic, and 128-bit or smaller vectors might be optimized to use
	    Altivec.]))
	 
	 )
      
   )

   (section :title "Fault Tolerance Extensions"

      (p [Fault tolerance will be added to Plasma in three main ways:])
      
      (itemize 
	 
	 (item 
	    
	    (p [All system signals will be mapped to C++ exceptions.  So, for
	    example, a segmentation fault will generate an exception which can
	    be caught and handled using ,(code [catch]) blocks, rather than
	    having to muck around with POSIX signal handlers.  This will be true
	    for any special exceptions provided by a system for specific fault
	    tolerance exceptions, e.g. memory errors, interface timeouts,
	    etc.]))
	 
	 (item 
	    
	    (p [An exception which propagates to the top of a thread will be
	    caught and held until another thread tries to wait on that thread.
	    The exception will then be propagated to all waiting threads.  This
	    means that an exception in a ,(code [par]) block will propagate to
	    the scope outside of the ,(code [par]) block. An exception which
	    occurs in a function which is launched via the ,(code [spawn])
	    operator will propagate to any thread which calls ,(code [value()])
	    on the relevant ,(code [Result]) object.  In this way, exceptions
	    will propagate across thread boundaries, allowing them to be dealt
	    with via the appropriate ,(code [catch]) block.])
	    
	    )
	 
	 (item
	    
	    (p [A feature for specifying alternative implementations will be
	    added to Plasma.  This follows the basic concept of ,(i [recovery
	    blocks]):  If a particular piece of code fails, the system will
	    recover and try an alternative method for doing the same thing.])
	    
	    (p [If a method has an attribute of ,(code [pRecover]), it will be
	    replaced by a recovery block mechanism and the original body will be
	    the first implementation tried.  Other implementations may be
	    specified by using the attribute ,(code [pOr]).  For example:])
	    
	    (cprog [

	    class Foo {
	    public:
	      pRecover int func(int,int);
	      pOr      int func_alt1(int,int);
	      pOr      int func_alt2(int,int);
	    private:
	      ...
	    };

])
	    
	    (p [Each alternative must have the same signature as the original
	    ,(code [pRecover]) method, but the name may be different.  The list
	    of alternatives terminates at the first method not marked by a
	    ,(code [pOr]) attribute.])
	    
	    (p [The above example would then be expanded into something like the
	    following:])
	    
	    (cprog [

	    int Foo::foo(int x,int y)
	    {
	      checkpoint();
	      try {
	        int rc = func_orig(x,y); // Original implementation of func().
		complete();
		return rc;
	      }
	      catch (...) {
	        recover();
	        try {
		  int rc = func_alt1(x,y);     // Alternative 1.
		  complete():
		  return rc;
		}
		catch (...) {
		  recover();
		  try {
		    int rc = return func_alt2(x,y);   // Alternative 2.
		    complete();
		    return rc;
		  }
		  catch (...) {
		    recover();
		    throw;                   // No remaining alternatives.
		  }
		}
	      }
	    }

])
	    
	    (p [The first thing that happens is that the ,(code [checkpoint()])
	    method is called.  If the class does not have this method, it is
	    skipped.  This method should perform whatever actions are required
	    to save the state of the class.  In some cases, such as in a purely
	    functional algorithm, there is no need to do any check-pointing,
	    while in other cases work may be required.])
	    
	    (p [Each implementation is then tried in order.  If the function
	    succeeds, the ,(code [complete()]) function is called, if it exists.
	    This allows the class to clean up, such as by deleting a checkpoint,
	    or committing a transaction.  If the method does not exist, the
	    implementation's result will be returned directly.])
	    
	    (p [If an exception does occur, it is caught and the ,(code
	    [recover()]) method is called if it exists.  The next alternative is
	    then called.  If no alternatives remain, the exception is propagated
	    up the stack.])
	    
	    )
      
	 )
      
      )
   
   (section :title "Real-time Programming Extensions"
	 
      (p [We propose adding various extensions to Plasma to make it easier to
      develop real-time embedded applications.  For example, the ,(code
      [deadline]) class will be used to state that a certain sequence of code
      (from the point of declaration to the end of the scope) must execute
      within the specified amount of time:])
	 
	 (cprog [

          {
            deadline d(20);
            ... <code> ...
            // Execution must reach this point within 20 time units.
          }

])
	 
      (p [Otherwise, an exception will be thrown.  The exception can then be
      caught by a recovery block and an alternative action taken.])
	 
      (p [It should be possible to statically analyze a Plasma program which is
      free of unbounded-loops.  The ,(code [deadline]) declarations can then be
      used by the static analysis tool as assertions and these can be checked by
      analyzing the relevant code sequences.])
	 
      )
	       
   (section :title "Language Enhancements"

      (itemize
	 
	    (item
	       
	       (p [Default initialization for all built-in variables will be
	       added.  This inconsistency in the C++ language is frequently the
	       source of difficult to find bugs and is completely unnecessary: A
	       good optimizing compiler can remove unneeded initializations.
	       For example:])
	       
	       (cprog [ int i; // Would be initialized to 0. ])

               )
	       
	    (item
	       
	       (p [Null-pointer checking will be performed.  This can be
	       implemented without adding extra runtime overhead: A null-pointer
	       access will cause a protection fault, which can then generate a
	       C++ exception.])
	       
	       )
	       	       	           
	    (item
	    
	       (p [A ,(code [let]) statement which would allow for the
	       declaration of variables without explicitly stating their type
	       will be added.  The type would be implied from the type of the
	       initializing expression.  For example:])
	 
	       (cprog [ let i = ValueCheck<int,std::bind2nd(std::equal_to<int>(),10)])
	       
	       )
	       
	    (item
	       
	       (p [A ,(code [final]) block will be added to the language.  This
	       may only follow a ,(code [try]) or ,(code [catch]) block and will
	       be executed whether an exception occurs or not.]))
	       
	    (item
	       
	       (p [A proper module system will be added.  C++'s use of header files for
	       conveying declaration information make for extremely inefficient
	       compilation.  This is compounded by the fact that templates need
	       to be in header files.  A proper module system could dramatically
	       speed up development time.])
	       
	       )
	       
	    (item
	       
	       (p [Nested functions and lambda functions with true closures will
	       be added.  A closure would only be allocated if control-flow
	       analysis indicated that a function might escape its parent's
	       scope.  In that case, the relevant local variables would be
	       placed in a closure.  Thus, no extra overhead would exist for the
	       usual case of un-nested functions or even for the case where a
	       function did not escape.])
	       
	       (p [The main advantage of adding this feature is to be able to
	       better utilize generic, highly-optimized functions such as those
	       present in the STL.  For instance, the ,(code [foreach]) function
	       becomes far more useful when a lambda function can be used
	       directly as the functor argument.  Since ,(code [foreach]) can be
	       specialized for different data structures, it can potentially
	       yield a faster solution for iterating over a container than a
	       for-loop.])
	       
	       )
	       
	    (item 
	       
	       (p [A meta-object protocol/advanced macro processor will be
	       added.  As mentioned above, the current Plasma implementation
	       uses ,(ref :text "OpenC++" :url
	       "http://sourceforge.net/projects/opencxx/") to convert Plasma
	       into C++.  By making such a feature a part of Plasma itself, new
	       language features could be added without changing the actual
	       language definition.])
	       
	       (p [This means that constructs such as ,(code [alt]) and ,(code
	       [par]) could still be implemented by the macro facility; the
	       parallelism in the language would be implemented as low-level
	       primitives which would not be directly used by the user.])
	       
	       )
	    
	    )
	 
	 )

   (section :title "Behavioral Synthesis"
      
      (p [We would like to be able to synthesize Plasma to hardware.  This has
      already been demonstrated for ,(ref :text "SystemC" :url
      "http://systemc.org") and ,(ref :text "Handel C" :url
      "http://www.celoxica.com/methodology/handelc.asp").  The latter technology
      is very similar to Plasma in that its parallelism is also based on that
      found in Occam.  Therefore, it should be possible to use an existing
      synthesis tool, with relatively minor modifications to the front-end to
      understand Plasma's features.  We will designate a synthesizable subset of
      the language, such as requiring bounded loops, no dynamic memory
      allocation, etc.])
      
      (p [The result would be a very powerful system:  A user could use the same
      language for modeling a complex design, then directly synthesize a portion
      of it to an FPGA or an ASIC, while other parts of the program are compiled
      to run on a FreeScale PowerPC part.])
      
      )
	 
)